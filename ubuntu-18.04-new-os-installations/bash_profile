test -e /media/70GB/home/amir/
if [[ $? -eq 0 ]]; then
	for i in $(ls /media/70GB/home/amir/ -a); do 
		if [[ "$i" == ".bash_history" ]]; then
			continue
		fi
		ln -s /media/70GB/home/amir/"$i" ~/ 2>/dev/null
	done
fi


# declare -f is_computer_screen_locked
# is_computer_screen_locked(){
#     python3 <<< 'from amir_analysis_functions import is_computer_locked; print(is_computer_locked())' | tr '[:upper:]' '[:lower:]'
# }


# declare -f disable_lock_screen_after_n_seconds_of_login
# disable_lock_screen_after_n_seconds_of_login(){
#     echo false > /home/amir/github/Amir-personal/lock-screen-after-n-seconds-of-login.txt
# }

# PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# PS1='\[\e]0;\u@\h: \w\a\]\e[7m\D{%d-%b}|\t\e[27m:\w\$ '
# PS1='\[\e]0;\w\a\]\e[7m\D{%d-%b}|\t\e[27m:\w\$ '
# PS1='\[\e]0;\w\a\]\e[7m\D{%d-%b}|\t\e[27m:\e[1m\w\e[21m\033[00m\]\$ '
RED="\033[0;31m"
NORMAL="\033[0m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
ORANGE="\033[1;33m"

PS1='\n--------------------------------------------------------------------------------------------------------\n\[\e]0;\u@\h: \w\a\]\[\033[01;32m\]\D{%d-%b}|\t:\[\033[01;34m\]\w\[\033[00m\]\$ '

alias Alias_backup='alias > _alias_temp ; diff _alias_temp github/Linux/alias  | grep ^\< | sed '\''s/^< //g'\'' > _alias_tempp; cat _alias_tempp >> github/Linux/alias; rm -f _alias_temp*'
alias Atom='atom'
alias NL_down='blugon --setcurrent="-500"'
alias NL_up='blugon --setcurrent="+500"'
alias Youtube_480='youtube-dl -f '\''bestvideo[height<=480]+bestaudio/best[height<=480]'\'''
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias c='rm c_program; gcc -o c_program c_program.c ; ./c_program'
alias c_p='cd ~/github/C-programming-A_Modern_Approach-book-Exercises-/ ; subl c_program.c ; (gopen *.pdf &); gnome-terminal ; (jl *.ipynb &) ; sleep 3; exit'
alias c_server='read -p '\''Enter last 3 digits from server IP address: '\'' ip;  sudo ssh lfd-server@192.168.8.'
alias c_subl='subl && sleep 3 && wmctrl -r :ACTIVE: -e 0,0,0,1960,660'
alias calc='gcalccmd'
# alias copyfrom='xclip -sel cli <'
# alias copyto='xsel -b >'
alias cpu_info='cat /proc/cpuinfo | grep '\''model name'\'' | uniq ; echo -en '\''Cores           : 8\n'\'''
# alias current_wifi_name='echo yes:Jazz-LTE-438A | sed '\''s/yes://g'\'''
alias current_wifi_name='nmcli d w l | grep ^*'
alias d='du -sh -B M * | sort -nr'
alias dropbox_sync='~/.dropbox-dist/dropboxd'
alias eclipse='/home/amir/eclipse/java-2020-03/eclipse/eclipse'
alias egrep='egrep --color=auto'
alias facebook-links='/home/amir/github/Daily_facebook/facebook-links.py'
alias fgrep='fgrep --color=auto'
alias freemem='cat /proc/meminfo | grep -i '\''inactive:\|memfree:'\'''
alias g='read a; firefox google.com/search?q="$a"; sleep 2; exit'
alias grep='grep --color=auto'
alias h1-zong='nmcli d w c H1-Zong password wifi@lfd'
alias hotspot='nmcli device wifi hotspot con-name Amir-hotspot ssid Amir-hotspot band bg password password123'
# alias i='ipython3'
alias jazz='nmcli d w c Jazz-LTE-438A password 34969900'
alias jazz_3='nmcli d w c Jazz-LTE-33ED password 78384606'
alias jl='jupyter-lab'
alias jn='jupyter-notebook'
alias jp='jupyter-notebook'
alias l='ls -CF'
alias la='ls -A'
alias lfd_jazz='nmcli d w c lfd_jazz password lfd@12345'
alias ll='ls -latr'
alias ls='ls --color=auto -F'
alias mv='mv -i'
alias J="python3 manage.py runserver"
alias open-facebook-links='/home/amir/github/Daily_facebook/open_fb_links.py'
alias p='python3 -c '\''t=input(); print(eval(t))'\'''
# alias pdf='(feh ~/Dropbox/pics/while-reading-pdf-on-15inch-laptop.png &)'
alias pin='/home/amir/github/Amir-personal/PIN/pin2.py'
alias ping='ping 8.8.8.8'
alias pwd_current_directory_to_clipboad='echo -n $(pwd) | xclip -sel cli'
alias pycharm='cd /opt/pycharm-community-2019.3/bin; ./pycharm.sh'
alias rm='mv -f -t ~/.local/share/Trash/files 2>/dev/null'
alias sharjeel='bash ~/awesome-sharjeel-wifi-connect.wifi'
# alias si='xclip -selection clipboard -t image/png -o >'
alias sqlectron='/usr/Sqlectron-1.30.0/sqlectron'
alias telenor='nmcli d w c Telenor\ 4G-D9BF password 91423958'
alias tor='cd /etc/tor-browser_en-US; ./start-tor-browser.desktop'
alias tu='trans :ur'
alias u='del -rf /home/amir/db/*; del -rf /home/amir/Script/logs.csv; del -rf /home/amir/Script/logs.pkl'
alias wl='nmcli d w r; sleep 10; nmcli d w l'
alias z='ls *.mp4 -1'
alias zong2='nmcli d w c ZONG\ MBB-E5573-2592 password 78624687'
alias zongd='nmcli d w c ZONG\ MBB-E5573-D164 password 34886114'
alias stop_qualys="[[ $(/usr/sbin/service qualys-cloud-agent status 2>/dev/null| grep 'Active: inactive (dead)' | wc -l) -eq 0 ]] &&  sudo /usr/sbin/service qualys-cloud-agent  stop"
# alias youtube-dl="while :; do /usr/local/bin/youtube-dl -t ; done"
# alias j="for i in `ps aux | grep manage | grep -v color=auto | grep manage.py | sed 's/\ \{1,\}/,/g' | cut -d, -f2`; do kill $i ; done; python manage.py  runserver &  sleep 1s; firefox http://127.0.0.1:8000/"
alias vpn_g="echo https://www.vpnbook.com/; sudo openvpn --config /home/amir/Downloads/Programs/VPN/vpnbook-pl226-udp53.ovpn --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt" 
alias symbolic_links="ls -l | grep ^l"
alias Latex="cd github/Amir-personal/Resume/Latex-resume/; echo R | latex -output-format pdf amir-saleem-data-science-resume.tex; if [[ $? -eq 0 ]] ; then evince amir-saleem-data-science-resume.pdf; fi"
alias jango="/home/virtual_envs/auto_eda/bin/python3 /home/amir/github/LFD_projects_6/36-EDA_tool/audo_eda_modeling_app/manage.py runserver"
#alias Latex="echo R | latex -output-format pdf resume.tex"
alias vpn_LFD="sudo openvpn --config /home/amir/github/*/amirsaleem_2.ovpn"
alias android-studio="/home/amir/Downloads/android-studio/bin/studio.sh"
alias gpt3="/amir_bin/chatgpt"
alias mirror_screen_display="xrandr --output $(xrandr --query | grep -v ^\  | grep \ connected | awk '{print $1}' | head -n1) --same-as $(xrandr --query | grep -v ^\  | grep \ connected | awk '{print $1}' | tail -n1)"

# alias external_screen_turn_off="xrandr --output $(xrandr --query  | grep ^HDMI | cut -d' ' -f1) --off"
alias external_screen_to_mirror="xrandr --output eDP-1 --same-as HDMI-1"
alias external_screen_to_single_main_display="xrandr --output eDP-1 --auto --output HDMI-1 --off"

# alias external_screen_to_join_display="xrandr --output eDP-1 --auto --output HDMI-1 --auto --above eDP-1"
alias external_screen_to_join_display="xrandr --output eDP-1 --auto --pos 0x1080 --output HDMI-1 --auto --pos 0x0"
# alias set_displays_positions="xrandr --output HDMI-1 --auto --pos 950x0 --output DP-1 --auto --pos 2850x0 --output eDP-1 --auto --pos 1920x1080"
alias set_displays_positions="xrandr --output HDMI-1 --auto --pos 0x0 --output DP-1 --auto --pos 1921x0 --output eDP-1 --auto --pos 1000x1100"
alias camera_record_video="ffmpeg -f v4l2 -video_size 640x480 -i /dev/video0 vidoe_camera_$(date +%Y%m%d_%H%M%S).mp4"

alias VPN="echo nhttps://www.vpnbook.com/; nmcli connection modify vpnbook-ca196-udp25000 +vpn.secrets 'password-file=/home/amir/github/Amir-personal/VPN_password.txt'; nmcli connection up vpnbook-ca196-udp25000"

# alias youtube_dl_docker='sudo docker run --rm -v "$(pwd):/downloads" youtube-dl-image:latest'

alias arduino="/home/amir/Downloads/squashfs-root/arduino-ide --log-level debug"

PATH="$PATH:/amir_bin:/home/amir/.local/bin:/home/amir/github/Kids_Vids"
PATH="$PATH:/usr/bin/pip3"
PATH="$PATH:/usr/bin/python3"
PATH="$PATH:/home/amir/github/Amir-personal"


# bind '"\C-p": "\C-e\C-u xclip -sel cli <<"EOF"\n\C-y\nEOF\n\C-y"'

# commit <HISTSIZE> in .bashrc
HISTSIZE=1000000
# commit <HISTFILESIZE> in .bashrc
HISTFILESIZE=-1


# if ! [[ "$(ps -p $(ps -p $(echo $$) -o ppid=) -o comm=)" =~ 'bicon'* ]]; then
#   bicon.bin
# fi

declare -f Youtube_dl
Youtube_dl() {
	echo -e "\n\nThere are other `echo $(ps aux | grep youtube-dl | wc -l)-1|bc` youtube-dl downloading jobs running\n\n"
	while :; do
		echo -e "\n\n*************** New attempt ***************\n\n" 
		$(which youtube-dl) $1
		if [[ $? -eq 0 ]] ; then 
			return 1
		fi
	done
}

declare -f poweroff
poweroff() {
	/amir_bin/battery
	test -e /home/amir/.firefox_backups/
	if [[ $? -ne 0 ]]; then
		echo -e "\nThe folder `/home/amir/.firefox_backups/` is not exist, please create it first..."
		reaturn 1
	fi
	directory="/home/amir/.firefox_backups/`date +%d-%m-%y_%T | sed "s/\//-/g"`"
	# cp -rv /home/amir/.mozilla/firefox/*.default-release/sessionstore-backups "$directory"
	# cp -rv /home/amir/snap/firefox/common/.mozilla/firefox/pwpe1uar.default/sessionstore-backups "$directory"
	cp -rv $(locate sessionstore-backups | grep -v lz4) "$directory"
	lz4jsoncat $(locate recovery.jsonlz4 | grep -v _) | jq -r '.windows[].tabs[].entries[-1].url' > "$directory/OPNED_URLS.txt"
	echo -e "\n\nHave you puched out? [yes|no] " 
	read ans
	if [[ $ans == "yes" ]] ; then
		/sbin/poweroff
	else
		android-studio
	fi
}

declare -f rdfind
rdfind(){

	if [[ `find . -maxdepth 1  -printf '%u:'  | cut -d: -f1` == 'root' ]]; then 
		echo -e '\n\nThe current folder is in root ownership, please run\nsudo /usr/bin/rdfind .\n'
	else 
		free_space_in_current_directory=$(df -BM | grep `df -P . | sed -n '$s/[[:blank:]].*//p'` | sed 's/ \{1,\}/,/g' | cut -d, -f4  | cut -dM -f1)
		if [[ $free_space_in_current_directory -lt 100 ]]; then
			echo -e "\nSorry, There is only $free_space_in_current_directory MB left in current partition\nExitting ........\n\n"
			return 1
		fi 
		read -p "Do you want to consier more directories beyond the CWD? if so please provdie them: " more_directories
		if [[ -z "$more_directories" ]]; then 
			/usr/bin/rdfind .
		else 
			/usr/bin/rdfind . "$more_directories"
		fi
		if [[ $(cat results.txt | grep -v ^\# | wc -l) -eq 0 ]]; then
			rm -f results.txt
			echo -e "${RED}\n\nNo duplicate file\n\n${NORMAL}"
			return 0
		fi

		/amir_bin/rdfind_analysis

	fi 
}

# day_of_week=`date +%u`
# if   [[ $day_of_week = 6 ]] ; then
#     poweroff
# elif [[ $day_of_week = 7 ]] ; then
#     if [[ `date +%H | sed 's/^0//g'` < 21 ]] ; then
#         poweroff
#     fi
# fi

declare -f calculator
calculator(){
	expression=$1
	if [[ -z $expression ]]; then
		read -p "Enter you expression: " expression
	fi
	x=$(bc <<< "scale=4; $expression")
	if [[ "${x:0:1}" == "." ]]; then
		echo 0$x
	else
		echo $x
	fi
}

declare -f calculator_while_loop
calculator_while_loop(){
	while :; do
		echo ''
		read -p "Enter you expression: " expression
		calculator "$expression"
	done
}

# declare -f VPN
# VPN(){
#     (yes | naclient login -user  $Kashat_user -password $kashat_password -profile "$kashat_profile" >/dev/null 2>&1)
# }

declare -f copyto
copyto(){
	test -f "$1"
	if [[ $? -eq 0 ]]; then
		echo -e "\nSorry, the file is exists\nAborting ......\n\n"
		return 1
	fi
	xsel -b > /tmp/temp_copy
	echo -e "$(cat /tmp/temp_copy)\n" > "$1"
}

	declare -f copyfrom
copyfrom(){
	if [[ $(ls /tmp/last_copy_* 2>/dev/null | wc -l) -eq 0 ]]; then # If no results found for /tmp/last_copy_* 
		files_count=0
	else
		files_count=$(ls /tmp/last_copy_* 2>/dev/null | wc -l)
	fi
	let "files_count++"
	copyto /tmp/last_copy_$files_count
	xclip -sel cli < "$@"
}


declare -f max
max(){
	float_exists=$(echo "$@" | grep -o '\.' | wc -l)
	if [[ $float_exists > 0 ]]; then
		echo -e "\nSorry, There is a float in provided numbers, please provide ONLY INTEGERS\nAborting........\n" 
		return 1
	fi
	if [[ -z $@ ]]; then
		echo -e "\nPlease provide multiple numbers\nAborting......."
		return 1
	fi
	max=-100000
	for i in $@ ; do
		if [[ $i -gt max ]]; then
			max=$i
		fi
	done
	echo $max
}

declare -f pwd_print
pwd_print(){
	x=$(eval "pwd")
	echo -n "'$x/$1'" | xclip -sel clip
	if [[ $? -eq 0 ]]; then
		echo -e "\nCopied to clipboard\n"
	fi
}

declare -f kill_youtube
kill_youtube() {
	if [[ $( ps aux | grep youtube-dl |wc -l) -ne 2 ]]; then
		echo -e "\nThere are more than one youtube-dl session"
	   return 1
	fi
	kill $(ps aux | grep youtube-dl | head -n1 | sed 's/\ \{1,\}/,/g' | cut -d, -f2)
	if [[ $? -eq 0 ]]; then
		echo -e "\n\nyoutube-dl session killed successfully\n"
	else
		echo -e "\n\nAn error occured during killing youtube-dl sessson"
	fi
}


declare -f DEL
DEL(){
	RED="\033[0;31m"
	NC='\033[0m' 
	echo -e "\nAre you need to Remove the following: [yes|no]"
	echo -e "${RED}NOTE: This is the $(pwd) direcotry${NC}\n"
	for i in "$@"; do
		echo "$i"
	done
	read ans
	if [[ $ans == "yes" ]]; then
		/amir_bin/DEL "$@"
	fi
}

# declare -f rm
# rm() {
#     mv -f "$@" ~/.local/share/Trash/files/
#     if [[ $? -ne 0 ]] ; then 
#         /usr/bin/rm -rf "~/.local/share/Trash/file/$@"
#     fi
#     mv "$@" ~/.local/share/Trash/files
# }

# declare -f pylint_amir
# pylint_amir(){
#     pylint --msg-template='{msg_id}:{line:3d}:{column}:{msg}' "$1"  | grep "^[A-Za-z-]" | head -n -2 | sort -k1,4 -s
# }


declare -f pylint_only_errors
pylint_only_errors(){
	pylint --errors-only "$1"
}

declare -f change_PS1
change_PS1(){
	PS1="$PS1\n>>> "
	export "$PS1" 2>/dev/null
}

declare -f swap_off
swap_off() {
	cat /home/amir/github/*/._mz_ | sudo -S -k swapoff -a
}


declare -f ADB
ADB() {
	adb tcpip 5555
	read -p "Enter any key after allow in mobile: "
	adb connect `adb shell ifconfig wlan0 | grep 192 | cut -d: -f2 | cut -d ' ' -f1`:5555
}


declare -f Chrome_all_tabs
Chrome_all_tabs() {
	IFS=$'\n'
	cat -e `locate Current\ Session | grep chrom | sed 's/\ /\\ /g'` | sed -e 's/\^@/\n/g' -e '/_\/chrome/d' | grep -Po '(http|https)://\K.*' | sort -u
}

declare -f extentions_for_given_file_names
extentions_for_given_file_names() {
	IFS=$'\n'
	for i in "$@"; do
		basename "$i"
	done | rev | cut -d. -f1 | rev | sort | uniq -c | sort -n
}


# declare -f check_duplicated_lines_count_bash
# check_duplicated_lines_count_bash() {
#     if [[ -z $1 ]]; then
#         echo -e "No lines passed\nAborting ....... \n"
#         return 1
#     fi
#     duplicated_lines="|$(sort  "$1" | uniq -c | sed 's/^\ \{1,\}//g' | sed s'/\ /,/' | grep -v 1, | cut -d, -f2-10 | awk '{$1=$1};1' | paste -sd '\|' | sed 's/|//')"
#     grep -E  --color=auto "$duplicated_lines"  "$1"
# }

# declare -f check_duplicated_lines_count_bash_for_file
# check_duplicated_lines_count_bash_for_file() {
#     if [[ -z $1 ]]; then
#         echo -e "No file passed\nAborting ....... \n"
#         return 1
#     fi
#     # duplicated_lines="|$(cat "$1" | sort | uniq -c | sed 's/^\ \{1,\}//g' | sed s'/\ /,/' | grep -v 1, | sort -n)"
#     duplicated_lines=$(cat "$1" | sort | uniq -c | sed 's/^\ \{1,\}//g' | grep -v ^1\  | sort -n)
#     echo "$duplicated_lines"
# }


declare -f todays_first_computer_on_time
todays_first_computer_on_time() {
	current_date="/home/amir/.$(date +%d-%m-%y)"
	test -e "$current_date"
	if [[ $? -ne 0 ]]; then
		current_time=$(date +%s)
		echo "$current_time" > "$current_date"
	fi
}


declare -f time_since_first_login_today
time_since_first_login_today() {
	current_date="/home/amir/.$(date +%d-%m-%y)"
	first_login_time=$(cat "$current_date")
	echo -e "\nHH:MM:SS\n$(date -d@$(cat $current_date ) +%T):\tTodays first log-in time"
	current_time=$(date +%s)
	time_pased="$((current_time-first_login_time))"
	convertsecs $time_pased
}



declare -f internet_speed
internet_speed() {
	ifstat -t -i $(ifconfig  | grep ^wlp | cut -d: -f1)
}


declare -f convertsecs
convertsecs() {
	integet=${1%.*}
	((y=${integet}/31536000))
	((d=${integet}%31536000/86400))
	((h=${integet}%86400/3600))
	((m=(${integet}%3600)/60))
	((s=${integet}%60))
	x=$(printf "%02d:%02d:%02d:%02d:%02d" $y $d $h $m $s)
	# echo -e "YY:DD:HH:MM:SS\n$x" | column -t -s\:
	echo "$x"
}


declare -f free_space_on_current_partition
free_space_on_current_partition(){
	free_space(){
		df -Ph . | tail -n1  | sed 's/\ \{1,\}/,/g' | cut -d, -f4
	}
	if [[ -z $1 ]]; then
		free_space
		return 0
	fi
	sleep_time=$1
	while :; do
		current_time=$(date +%T)
		free_space_in_part=$(free_space)
		echo "$current_time - $free_space_in_part"
		sleep $sleep_time
		# clear
	done



}

# amir

_data_file_read(){
	IFS=$'\n'
	/usr/bin/rm -f /tmp/python_code
	/usr/bin/rm -f /tmp/data_file.pkl
	file_name=$1

	# If no paramter is passed and there is only data file then read it.
	if [ -z $file_name ]; then
		data_files_counts=$(ls *.csv *.pkl *.xlsx 2>/dev/null | wc -l)
		if [[ $data_files_counts -eq 1 ]]; then
			ls *.csv 2>/dev/null | wc -l
			if [[ $? -eq 0 ]]; then
				file_name=$(ls *.csv)
			else
				ls *.pkl 2>/dev/null | wc -l
				if [[ $? -eq 0 ]]; then
					file_name=$(ls *.pkl)
				else
					ls *.xlsx 2>/dev/null | wc -l
					if [[ $? -eq 0 ]]; then
						file_name=$(ls *.xlsx)
					fi
				fi
			fi
		fi
	fi

	/amir_bin/save_input_file_as_data_file.pkl.py "$file_name"
	
	# if [[ $file_name == *.csv ]]; then
	#     echo "
	#     import pandas as pd
	#     try: pd.read_csv('$file_name').to_pickle('/tmp/data_file.pkl')
	#     except: pd.read_csv('$file_name', encoding='ISO-8859-1').to_pickle('/tmp/data_file.pkl')
	#     " | ipython3 > /dev/null
	# elif [[ $file_name == *.pkl ]]; then
	#     echo "
	#     import pandas as pd
	#     try: pd.read_pickle('$file_name').to_pickle('/tmp/data_file.pkl')
	#     except: pd.read_pickle('$file_name', encoding='ISO-8859-1').to_pickle('/tmp/data_file.pkl')
	#     " | ipython3 > /dev/null
	# elif [[ $file_name == *.xlsx ]]; then
	#     echo "
	#     import pandas as pd
	#     try: pd.read_excel('$file_name').to_pickle('/tmp/data_file.pkl')
	#     except: pd.read_excel('$file_name', encoding='ISO-8859-1').to_pickle('/tmp/data_file.pkl')
	#     " | ipython3 > /dev/null
	# fi

	if [[ $? -eq 0 ]]; then 
		echo ">>>>>>>>> Saved the file successfully as /tmp/data_file.pkl"
	else
		echo ">>>>>>>>> Failed to save the data as /tmp/data_file.pkl"
	fi

	return 0
}



declare -f data_read_clipboard
data_read_clipboard() {
	python_code="
import pandas as pd
import clipboard
from pandas import to_datetime

def get_type(value):
	for fun in (int, float, to_datetime, str):
		try:
			fun(value)
			return fun.__name__
		except:
			...

lines =  clipboard.paste().splitlines()[:2]
types = []
for line in lines:
	types.append([get_type(c) for c in line.split('\t')])

if types[0] == types[1]:
	df = pd.read_clipboard(header=None, sep=',', on_bad_lines='skip')
	df.columns = [f'col_{i}' for i in range(df.shape[1])]
else:
	df = pd.read_clipboard(sep=',', on_bad_lines='skip')
df = df.dropna(how='all').dropna(how='all', axis=1)
if df.shape[1] == 1:
	x = df['col_0']
	del df
"
	echo "$python_code" > /tmp/python_code
	echo -e "\n>>>>>>>>>> A dataframe created using data on the clipboad, your can use it as 'df'<<<<<<<<<<\n"
	$HOME/.venv_base/bin/ipython3 -i  /tmp/python_code
}

	


declare -f data_file_make_a_sample
data_file_make_a_sample() {
	data_file_name="$1"
	_data_file_read "$data_file_name"
	if [[ $? -ne 0 ]]; then
		echo -e "\nFailed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	total_rows_in_the_file=$(python3 <<< 'import pandas as pd; print(pd.read_pickle("/tmp/data_file.pkl").shape[0])')
	n_rows=$2
	if [[ -z $n_rows ]]; then
		echo 
		read -p "How many rows (out of $total_rows_in_the_file total rows) do you want to sample? " n_rows
	fi
	
	x="import pandas as pd; print(pd.read_pickle('/tmp/data_file.pkl').sample(int($n_rows)).to_csv('SAMPLE.csv', index=False))"
	echo "$x" | python3 -c "$x"
}




declare -f data_file_show_head
data_file_show_head(){
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	x="import pandas as pd; print(pd.read_pickle('/tmp/data_file.pkl').head())"
	echo "$x" | python3
}

declare -f data_file_show_sample
data_file_show_sample() {
	# read -p "How many rows do you want to be printed? " n_rows
	_data_file_read "$1"
	n_rows=$2
	if [[ -z $n_rows ]]; then
		n_rows=10
	fi
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	x="
import pandas as pd
import clipboard
df = pd.read_pickle('/tmp/data_file.pkl').sample($n_rows)
clipboard.copy(df.to_markdown(index=False))
print(df.to_markdown(index=False))
print('\nThe data sampe copied to the clipboard\n')
"
	echo "$x" | python3 -c "$x"
}


declare -f data_file_show_shape
data_file_show_shape() {
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	x="import pandas as pd; print(pd.read_pickle('/tmp/data_file.pkl').shape)"
	echo "$x" | python3
}



declare -f pickle_print_type
pickle_print_type() {
	x="import pickle; print(str(type(pickle.load(open('"$1"', 'rb')))))"
	echo "$x" | python3
}

declare -f data_file_show_info
data_file_show_info() {
	file_name="$1"
	_data_file_read "$file_name"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi

x="
import pandas as pd
f = pd.read_pickle('/tmp/data_file.pkl')
print('################################################')
print('Type:', str(type(f)))
print('Len :', len(f))
if isinstance(f, pd.DataFrame):
	print('Shape:', f.shape)
	print()
	print('Head :')
	print(f.head().to_string())
	# print('Info')
	# print(f.info())
	# print('Memory Usage (MB):')
	# print(f.memory_usage(deep=True))
	print()
	print(f.memory_usage(deep=True).div(1000_000).rename('Size (MB)').rename_axis('Col').reset_index().merge(f.dtypes.rename('Type').rename_axis('Col').reset_index()).merge(f.nunique().rename_axis('Col').rename('Nunique').reset_index()).sort_values('Size (MB)').to_markdown(index=False))
	print('\n\n')
	nans = f.isna().sum().rename('NaNs Count').to_frame().merge((f.isna().mean()*100).rename('Average NaNs').to_frame(), right_index=True, left_index=True).loc[lambda x: x['NaNs Count'] > 0]
	if nans.empty:
		print('\nNo NaNs\n\n')
	else:
		print(nans.to_markdown())
		print('\n\n')
		print('Rows                     :', f.shape[0])
		print('Rows after dropping NuLLs:', f.dropna().shape[0])
print('################################################')
"
	echo "$x" | python3

	echo 

	du -sh "$file_name" 
	wc -l "$file_name"

}

declare -f data_file_show_nrows
data_file_show_nrows() {
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	x="import pandas as pd; print(pd.read_pickle('/tmp/data_file.pkl').shape[0])"
	echo "$x" | python3
}

declare -f pickle_show_content
pickle_show_content() {
	x="import pickle; print(pickle.load(open('"$1"', 'rb')))"
	echo "$x" | python3
}


declare -f data_file_read_dataframe_and_go_in_inpython
data_file_read_dataframe_and_go_in_inpython() {
	file_size_in_mb=$(du -sh $1 -BM)
	echo -e "\n\n$file_size_in_mb $1\n\n"
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	python_code="import pandas as pd; df = pd.read_pickle('/tmp/data_file.pkl'); "
	echo "$python_code" > /tmp/python_code
	$HOME/.venv_base/bin/ipython3 -i /tmp/python_code
}

declare -f data_file_read_dataframe_and_copy_to_clipboard
data_file_read_dataframe_and_copy_to_clipboard() {
	file_size_in_mb=$(du -sh $1 -BM)
	echo -e "\n\n$file_size_in_mb $1\n\n"
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	python_code='
import pandas as pd 
df = pd.read_pickle("/tmp/data_file.pkl")
if isinstance(df.index, pd.core.indexes.range.RangeIndex):
	index=False
else:
	index=True
df.to_clipboard(index=index)
'
	echo "$python_code" > /tmp/python_code
	$HOME/.venv_base/bin/ipython3  /tmp/python_code
}


declare -f data_file_list_columns_names
data_file_list_columns_names() {
	_data_file_read "$1"
	if [[ $? -ne 0 ]]; then
		echo "Failed to save the file as /tmp/data_file.pkl"
		return 1
	fi
	
	python_code="import pandas as pd; print(*pd.read_pickle('/tmp/data_file.pkl').columns.to_list(), sep='\n')"
	echo $python_code | python3
}


declare -f download_speed_stream
download_speed_stream(){ 
	total=1
	avg_speed=1
	start_time=$(date +%s)
	n=0
	sleep 1s
	echo -e '\n\n\n\n\n\n\n\n\n\n\n\n\n'
	wifi_chip_name=$(ifconfig  | grep ^wlp | cut -d: -f1)
	while :; do 
		let "n+=1"
		# echo -e "\n\n-------------------"
		# sleep 1s
		current_time=$(date +%s)
		time_passed_sec=$((current_time-start_time))
		time_passed=$(convertsecs $time_passed_sec)

		download_speed=$(ifstat -i "$wifi_chip_name" 1s 1 | awk 'NR==3 {print $1}')
		if [[ "$download_speed" == "n/a" ]] ; then
			sleep 1s
			continue
		fi
		# download_speed=${download_speed%.*}
		# if [[ $download_speed>1 ]]; then
		#     download_speed=${download_speed%.*}
		# fi

		total=$(echo "$total+$download_speed"|bc -l)
		# total_int=${total%.*}
		# total_int=$(size_in_proper_units $total_int)

		# avg_speed=$(echo "scale=1; $total/$time_passed_sec"|bc -l)
		avg_speed=$(echo "scale=1; $total/$n"|bc -l)
		# avg_speed_int=${avg_speed%.*}
		# avg_speed_int=$(size_in_proper_units $avg_speed_int)

		echo -n "          "
		echo -e '\e[14A\e[K'
		# echo "$(banner $download_speed)" #8
		toilet -f smmono12 $download_speed #11
		echo -e "YY:DD:HH:MM:SS\n$time_passed"
		# echo -e "Total: $total_int\t Avg: $avg_speed"
		echo -e "Avg: $avg_speed"
	done
}

declare -f size_in_proper_units
size_in_proper_units (){
	# Assumption: This function will get an input in KBs
	x=$(echo $1'>'1000000 | bc -l)
	if [[ $x -eq 1 ]]; then
		r=$(echo "scale=3; $1/1000000" | bc -l)
		echo "$r G"
	else
		x=$(echo $1'>'1000 | bc -l)
		if [[ $x -eq 1 ]]; then
			r=$(echo "scale=1; $1/1000" | bc -l)
			echo "$r M"
		else
			echo "$1 K"
		fi
	fi

}

declare -f pdf
pdf() {
	feh ~/Dropbox/pics/while-reading-pdf-on-15inch-laptop.png &
}

declare -f pickle_to_csv
pickle_to_csv() {
	# read -p "Enter csv file name: " csv_file_name
	csv_file_name="$1.csv"
	while : ; do 
		test -e "$csv_file_name"
		if [[ $? -ne 0 ]]; then
			break
		fi 
	done
	
	x="from pandas import read_pickle; read_pickle(open('"$1"', 'rb')).to_csv('"$csv_file_name"')"
	echo "$x" | python3
}


declare -f beep
beep() {
	#play -n synth 1.0 sine 1000
	play -n synth 0.5 sine 500

	# import winsound
	# frequency = 2500  # Set the frequency of the sound
	# duration = 1000  # Set the duration of the sound in milliseconds
	# winsound.Beep(frequency, duration)

}

declare -f merge_subtitles_with_a_video
merge_subtitles_with_a_video(){
	while [ $# -gt 0 ]; do
		# echo "$1"
		case "$1" in
			-v|--video_file_name)
			  video_file_name="$2"
			  ;;
			-s|--subtitles_file_name)
			  subtitles_file_name="$2"
			  ;;
			-o|--output_file_name)
			  output_file_name="$2"
			  ;;
			-h|--help)
			  echo -e "
		Usage:
			-v, --video_file_name ---------------- Video's path
			-s, --subtitles_file_name ------------ Subtitle's path
			-o, --output_file_name --------------- Output's path
			-h, --help --------------------------- help page
		   "
		   # return
			  ;;
			*)
			  echo -e "
			***************************
			* Error: Invalid argument.*
			***************************
			  "
			  return 
		esac
		shift
		shift
	done
	ffmpeg -i "$video_file_name" -i "$subtitles_file_name" -c copy -c:s mov_text -metadata:s:s:0 language=eng "$output_file_name"
}



declare -f create_a_swap_file
create_a_swap_file(){
	read -p "Enter a swap file's full name: " swap_file_name
	read -p "How big swap file do you want to create? Enter in GBs: " gbs
	# # Get free GBs available at /media/sdb2 partion
	# free_gb=$(df -BG  /media/sdb2/ | awk '{print $4}' | tail -n1 | sed 's/G//g')

	# if [[ $free_gb < 21 ]]; then
	#     echo -e "\nThere is less then 21GB available at /media/sdb2\nExisting......\n"
	#     return
	# fi

	# Create a 20GB file
	# dd if=/dev/zero of=/media/sdb2/swapfile.img bs=1G count=20
	sudo dd if=/dev/zero of="$swap_file_name" bs=1G count=$gbs

	# change permitions
	# sudo chmod 0600 /media/sdb2/swapfile.img
	sudo chmod 0600 "$swap_file_name"

	# # Add an entry to fstab file
	# # echo -e "\n/media/sdb2/swapfile.img swap swap sw 0 0" | sudo tee -a /etc/fstab > /dev/null
	# echo -e "\"n/$swap_file_name swap swap sw 0 0" | sudo tee -a /etc/fstab > /dev/null

	# make a swap
	# sudo mkswap /media/sdb2/swapfile.img
	sudo mkswap "$swap_file_name"


	# On the swap
	# sudo swapon  /media/sdb2/swapfile.img
	sudo swapon  "$swap_file_name"
}

declare -f record_bluetooth_headphone_audio
record_bluetooth_headphone_audio(){
	file_name=$(date +%d-%m-%Y_%H\:%M\:%S).wav
	# ffmpeg -f pulse -i bluez_sink.54_25_E7_83_00_84.a2dp_sink.monitor "$file_name"
	ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -f pulse -i bluez_sink.25_13_97_20_DD_0A.a2dp_sink.monitor -c:v libx264 -c:a aac "$file_name"
}

declare -f record_screen
record_screen(){
	file_name=$(date +%d-%m-%Y_%H\:%M\:%S).mkv
	# ffmpeg                \
	# -video_size 1920x1080 \ 
	# -framerate 50         \ 
	# -f x11grab            \  # Specifies the input format as x11grab, which is used for capturing the X Window System (X11) screen on Linux.
	# -i :0.0+0,0           \  # Specifies the input source. In this case, it's capturing the screen from the default X11 display, which is represented as :0.0. The +0,0 part indicates that it's capturing from the top-left corner of the screen (coordinates 0,0). 
	# -f pulse              \  # Sets the input format for audio capture as PulseAudio, a sound server for Linux.
	# -ac 2                 \  # Specifies that FFmpeg should capture audio in stereo (2 audio channels).
	# -i default            \  # Specifies the audio input source as "default," which typically represents the default audio input device on your system.
	# "$file_name"

	if [[ $(xrandr --listmonitors | grep x | wc -l) -eq 1 ]]; then
		ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+0,0 -f pulse -ac 2 -i default "$file_name"        
	elif [[ $(xrandr --listmonitors | grep x | wc -l) -eq 2 ]]; then
		echo -e "\nWhich screen do you want to record?\n\t1-Upper\n\t2-Lower\n"
		read ans
		if [[ $ans == 1 ]]; then
			ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+0,0 -f pulse -ac 2 -i default "$file_name" # top screen
		else
			if [[ $ans == 2 ]]; then
				ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+0,1080 -f pulse -ac 2 -i default "$file_name" # bottom screen
			fi
		fi
	else # More than two screens

		# Get monitor information dynamically
		monitor_data=$(xrandr --listmonitors | tail -n +2 | awk '{print ":0.0+" $3}' | sed -E 's:/[0-9]+::g' | sed 's/,/+/g')

		# Assign monitor offsets to variables
		upper_left="0.0+0,0"
		upper_right="0.0+1920,0"
		bottom_middle=$"0.0+946,1080"

		# Display options to the user
		echo "Choose a screen to record:"
		echo "1 - Upper Left"
		echo "2 - Upper Right"
		echo "3 - Bottom Middle"

		# Read user input
		read -p "Enter your choice (1/2/3): " choice

		# Determine the selected screen
		case $choice in
			1)
				selected_screen=$upper_left
				;;
			2)
				selected_screen=$upper_right
				;;
			3)
				selected_screen=$bottom_middle
				;;
			*)
				echo "Invalid choice. Exiting."
				exit 1
				;;
		esac

		# Tested
		# upper-left:    ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+0,0      -f pulse -ac 2 -i default "abc.mp4"
		# upper-righ:    ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+1920,0   -f pulse -ac 2 -i default "abc.mp4"
		# bottom-middle: ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :0.0+946,1080 -f pulse -ac 2 -i default "abc.mp4"

		ffmpeg -video_size 1920x1080 -framerate 50 -f x11grab -i :"$selected_screen" -f pulse -ac 2 -i default "$file_name"
	fi

	# ffmpeg                \
	# -f x11grab            \
	# -video_size 1920x1080 \
	# -framerate 30         \
	# -i :0.0               \
	# -f alsa               \
	# -i pulse              \
	# -ac 2                 \
	# -c:v libx264          \
	# -c:a aac              \
	# -strict experimental  \
	# -vf "format=yuv420p" 
	# $file_name

}


declare -f join_lines_with_space
join_lines_with_space() {
	python3 <<< "import clipboard; x = ' '.join([i for i in clipboard.paste().splitlines() if i.strip()]); clipboard.copy(x)"
}


declare -f extract_portion_of_video_from_long_video
extract_portion_of_video_from_long_video(){
	if [[ -z $1 ]] || [[ -z $2 ]] || [[ -z $3 ]] || [[ -z $4 ]]; then
		echo -e "
		This function require four perameters:
			1- Video name
			2- Start time (eg: 00:12:20)
			3- End Time (eg: 00:12:40)
			4- Ouput file name
		"
		# exit
		return 1
	fi
	file_name=$1
	start=$2
	end=$3
	output_file_name=$4

	echo -e "
		file_name        : $file_name
		start            : $start
		end              : $end
		output_file_name : $output_file_name
	"
	command="ffmpeg -i $file_name -ss $start -to $end -c copy $output_file_name"
	eval $command
	echo $command
}
declare -f brighness_external_screen
brighness_external_screen(){
	sudo ls > /dev/null
	echo -n "Current: "
	sudo ddcutil --display 1 getvcp 10 | sed 's/\ \{1,\}/\ /g' | cut -d'=' -f2 | cut -d, -f1 | sed 's/^\ //g'
	read -p "Enter new value (0-100): " val
	sudo ddcutil --display 1 setvcp 10 $val
}

declare -f repeat_if_fail
repeat_if_fail() {
	echo -e "# Write you bash code here, save it, and press Enter in the terminal\ncd $(pwd)" > /tmp/repeat_if_fail
	echo 
	subl /tmp/repeat_if_fail
	read -p "Press Enter: "
	test -e /tmp/repeat_if_fail
	if [[ $? -ne 0 ]]; then
		echo "Error: The file '/tmp/repeat_if_fail' doesn't exist."
		return 1
	fi
	while true; do
		bash /tmp/repeat_if_fail
		if [[ $? -eq 0 ]]; then
			break
		fi
	done
}











alias  vpn_g_a='echo https://www.vpnbook.com/; cat /home/amir/github/Amir-personal/p | sudo -S openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca149-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_b='echo https://www.vpnbook.com/; cat /home/amir/github/Amir-personal/p | sudo -S openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca149-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_c='echo https://www.vpnbook.com/; cat /home/amir/github/Amir-personal/p | sudo -S openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca149-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_d='echo https://www.vpnbook.com/; cat /home/amir/github/Amir-personal/p | sudo -S openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca149-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'

alias  vpn_g_1='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca196-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_2='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca196-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_3='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca196-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_4='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-ca196-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_5='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de20-tcp443.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_6='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de20-tcp80.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_7='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de20-udp25000.ovpn   --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_8='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de20-udp53.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias  vpn_g_9='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de220-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_10='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de220-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_11='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de220-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_12='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-de220-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_13='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr200-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_14='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr200-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_15='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr200-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_16='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr200-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_17='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr231-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_18='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr231-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_19='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr231-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_20='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-fr231-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_21='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-pl134-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_22='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-pl134-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_23='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-pl134-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_24='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-pl134-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_25='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk205-tcp443.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_26='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk205-tcp80.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_27='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk205-udp25000.ovpn  --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_28='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk205-udp53.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_29='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk68-tcp443.ovpn     --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_30='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk68-tcp80.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_31='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk68-udp25000.ovpn   --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_32='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-uk68-udp53.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_33='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us1-tcp443.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_34='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us1-tcp80.ovpn       --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_35='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us1-udp25000.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_36='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us1-udp53.ovpn       --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_37='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us2-tcp443.ovpn      --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_38='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us2-tcp80.ovpn       --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_39='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us2-udp25000.ovpn    --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'
alias vpn_g_40='echo https://www.vpnbook.com/; sudo openvpn --config  /home/amir/Downloads/Programs/VPN/vpnbook-us2-udp53.ovpn       --auth-user-pass /home/amir/Downloads/Programs/VPN/pass_file.txt'





































































change_PS1
todays_first_computer_on_time
time_since_first_login_today

export -f extentions_for_given_file_names
export -f max
export -f internet_speed
export -f convertsecs
export -f free_space_on_current_partition
export -f pickle_print_type
export -f pickle_show_content
export -f data_file_show_head
export -f data_file_show_sample
export -f data_file_show_shape
export -f data_file_show_info
export -f data_file_show_nrows
export -f data_file_read_dataframe_and_go_in_inpython
export -f data_file_list_columns_names
export -f download_speed_stream
export -f size_in_proper_units
export -f pickle_to_csv
export -f pdf
export -f beep
export -f merge_subtitles_with_a_video
export -f record_screen
export -f join_lines_with_space
export -f extract_portion_of_video_from_long_video
export -f _data_file_read
# export -f is_computer_screen_locked



export RED="\033[0;31m"
export NORMAL="\033[0m"
# export NONE='\033[00m'
# export RED='\033[01;31m'
export GREEN='\033[01;32m'
export YELLOW='\033[01;33m'
export PURPLE='\033[01;35m'
export CYAN='\033[01;36m'
export WHITE='\033[01;37m'
export BOLD='\033[1m'
export UNDERLINE='\033[4m'



declare -f zm
zm() { 
	IFS=$'\n'
	for i in mp4 webm mkv part ; do
		# count=$(ls *.$i 2>/dev/null| wc -l)
		count=$(find chuchu-tv-* -name "*.$i" 2>/dev/null| wc -l)
		# size=$(dt *.$i | grep total | sed 's/total//g')
		size=$(dt `find chuchu-tv-* -name "*.$i"` | grep total | sed 's/total//g')
		echo -e "$i\t $count \t $size"
	done
}
export -f zm





alias run_youtube="python3 <<< 'from amir_analysis_functions import run_youtube; run_youtube()'"


alias medusa_copy_on_vm_and_run="scp -i ~/.ssh/id_rsa_medusa /home/amir/Bitbucket/anomaly_detection_medusa/index.py 'ip-172-31-0-239.ec2.internal:/home/amir/'; ssh -i /home/amir/.ssh/id_rsa_medusa 'ip-172-31-0-239.ec2.internal' 'rm /home/amir/*.log; python3 /home/amir/index.py'"



declare -f execute_file_on_vm
execute_file_on_vm(){
	if [[ -z $1 ]] ; then
		file=/home/amir/github/Medusa/anomalies/index.py
		# file=/home/amir/github/Medusa/monday.com/fetch_data_from_redshift.py
	else
		echo "$1" | grep / >/dev/null
		if [[ $? -eq 0 ]]; then
			echo -e "/ in file_name\nAborting........\n"
			return 1
		fi
		file=$(echo "$(pwd)/$1")
	fi
	file_base_name=$(basename "$file")
	# scp -i ~/.ssh/id_rsa_medusa  "$file" 'ip-172-31-0-239.ec2.internal:/home/amir/monday.com/'
	scp -i ~/.ssh/id_rsa_medusa  "$file" 'ip-172-31-0-239.ec2.internal:/home/amir/'

	# ssh -i /home/amir/.ssh/id_rsa_medusa 'ip-172-31-0-239.ec2.internal' 'rm /home/amir/monday.com/*.{log,csv,txt} 2>/dev/null'
	ssh -i /home/amir/.ssh/id_rsa_medusa 'ip-172-31-0-239.ec2.internal' 'rm /home/amir/*.{log,csv,txt} 2>/dev/null'
	
	# ssh -i /home/amir/.ssh/id_rsa_medusa 'ip-172-31-0-239.ec2.internal' "cd /home/amir/monday.com/; python3 $file_base_name"
	ssh -i /home/amir/.ssh/id_rsa_medusa 'ip-172-31-0-239.ec2.internal' "python3 /home/amir/$file_base_name"
}

declare -f reset_bashprofile
reset_bashprofile(){
	source ~/.bash_profile >/dev/null
}

# declare -f change_python_path
# change_python_path(){
#     if [[ $(echo $PYTHONPATH | rev | cut -d/ -f1-2 | rev) == "python3.10/" ]]; then 
#         PYTHONPATH="/amir_bin/:/usr/bin/python3"
#         PYTHONPATH="$PYTHONPATH:/usr/lib/python3.10/:/usr/lib/python3.9/"
#     else
#         PYTHONPATH="/amir_bin/:/usr/bin/python3"
#         PYTHONPATH="$PYTHONPATH:/usr/lib/python3.9/:/usr/lib/python3.10/"
#     fi
#     export PYTHONPATH=$PYTHONPATH
# }

declare -f break_work
declare -f timer
timer() {
	# echo;
	# n=0
	# while true; do 
	#     let "n++"
	#     echo -e '\e[2A\e[K';
	#     convertsecs $n
	#     sleep 1s
	# done

	echo -e '\n\n\n\n\n\n\n\n\n';
	n=0
	while true; do 
		l=$(convertsecs $n)
		let "n++"
		echo -e '\e[11A\e[K'
		toilet -f smmono12 $l
		sleep 1s
	done
}

declare -f break_work
break_work() {
	if [[ -z $1 ]]; then
		limit_sec=300 # Default wait time (sec)
	else
		limit_sec=$1
	fi

	# If limit_sec is less than 30 then assume it minutes not seconds.
	if [[ $limit_sec -le 30 ]]; then
		limit_sec=$(echo $limit_sec*60|bc -l)
	fi

	break_started_before_sec=0
	while true; do
		sleep 1
		let "break_started_before_sec+=1"
		if [[ $break_started_before_sec -gt $limit_sec ]]; then
			beep
		fi
	done
}

declare -f random_number
random_number(){
	echo $((RANDOM * RANDOM % 1000000000))
}

declare -f i
i() {
	python_code="import os, pickle,  pandas as pd,  numpy as np,  matplotlib.pyplot as plt; print('\n\nos, pickle, pandas, numpy, matplotlib, and pickle are imported\n\n')";
	echo "$python_code" > /tmp/python_code;
	$HOME/.venv_base/bin/ipython3 -i /tmp/python_code
}


declare -f turing_google_comparative_analysis_work_for_current_week
turing_google_comparative_analysis_work_for_current_week() {
	python3 <<< '
from amir_analysis_functions import turing_google_comparative_analysis_work_for_current_week
turing_google_comparative_analysis_work_for_current_week()
'
}

declare -f copy_variable_to_clipboard
copy_variable_to_clipboard(){
	if [[ -z "$1" ]]; then
		echo -e "\nNo variable given ...\nAborting....\n"
		return 1
	fi
	VARIABLE="$1"
	echo -n "$VARIABLE" | xclip -selection clipboard
}


# Only for Turing Multimodality project
declare -f png
png(){
	# eog -f /home/amir/Multimodelity/png/$1.png
	eog /home/amir/Multimodelity/png/$1.png
}


declare -f data_read_clipboard_check_duplicates_in_series
data_read_clipboard_check_duplicates_in_series () 
{ 
	python_code="
import pandas as pd
import clipboard
from pandas import to_datetime

def get_type(value):
	for fun in (int, float, to_datetime, str):
		try:
			fun(value)
			return fun.__name__
		except:
			...

lines =  clipboard.paste().splitlines()[:2]
types = []
for line in lines:
	types.append([get_type(c) for c in line.split('\t')])

if types[0] == types[1]:
	df = pd.read_clipboard(header=None, sep=',', on_bad_lines='skip')
	df.columns = [f'col_{i}' for i in range(df.shape[1])]
else:
	df = pd.read_clipboard(sep=',', on_bad_lines='skip')
df = df.dropna(how='all').dropna(how='all', axis=1)
if df.shape[1] == 1:
	x = df['col_0']
	del df
print(x.str.lower().str.strip().value_counts().loc[lambda x: x>1].to_markdown())
";
	echo "$python_code" > /tmp/python_code;
	$HOME/.venv_base/bin/ipython3  /tmp/python_code
}

declare -f data_read_clipboard_check_show_duplicates_lines
data_read_clipboard_check_show_duplicates_lines () 
{ 
	python_code="
import pandas as pd
import clipboard
from pandas import to_datetime

def get_type(value):
	for fun in (int, float, to_datetime, str):
		try:
			fun(value)
			return fun.__name__
		except:
			...

lines =  clipboard.paste().splitlines()[:2]
types = []
for line in lines:
	types.append([get_type(c) for c in line.split('\t')])

if types[0] == types[1]:
	df = pd.read_clipboard(header=None, sep=',', on_bad_lines='skip')
	df.columns = [f'col_{i}' for i in range(df.shape[1])]
else:
	df = pd.read_clipboard(sep=',', on_bad_lines='skip')
df = df.dropna(how='all').dropna(how='all', axis=1)
duplicated_repos = df['Actual Repository link'].value_counts().loc[lambda x: x>1].index.to_list()
if not duplicated_repos:
	print('No duplicated repos')
	exit()

for dr in duplicated_repos:
	print(f'\n\n>>>>>>>>>>>>>>>> {dr}')
	print(df.loc[df['Actual Repository link'].eq(dr), ['IC', 'Actual Repository link', 'Batch Link', 'Made the bach of the repo']].to_markdown(index=False).replace('nan', '__'))

";
	echo "$python_code" > /tmp/python_code;
	$HOME/.venv_base/bin/ipython3  /tmp/python_code | grep '\|__'
}

get_max_lenght_splited_by_tab(){
	string="$1"
	IFS=$'\t' read -ra parts <<< "$string"
	max_length=0
	for part in "${parts[@]}"; do
	    length=${#part}
	    if (( length > max_length )); then
	        max_length=$length
	    fi
	done
}
declare -f pad_to_len
pad_to_len() {
    local input="$1"
    local len=$2
    local input_len=${#input}
    
    if (( input_len >= len )); then
        echo "$input"
    else
        local padding=$(( len - input_len ))
        padded_string=$(printf "%s%${padding}s" "$input" "")
    fi
}

print_numbers_after_lag(){
	PADDING=12
	num=1
	test -e /tmp/commands
	if [[ $? -ne 0 ]]; then 
		>/tmp/commands
		while true; do
			echo -e "Enter your command #$num ${RED}(Enter q if not command left)${NORMAL} " 
			read -p "" com
			if [[ "$com" == 'q' ]]; then 
				break
			fi
			echo "$com" >> /tmp/commands
			let "num++"
		done
	else
		echo
		echo "/tmp/commands is already exist, we are going to re-use it.."
		echo "### /tmp/commands"
		cat /tmp/commands
		echo 
	fi

	test -e /tmp/hreaders______.txt
	if [[ $? -ne 0 ]]; then 
		# echo -en "                " > /tmp/hreaders______.txt
		for i in $(seq 1 $(cat /tmp/commands | wc -l)); do 
			read -p "Enter header #$i: " hdr
			echo "$hdr" >> /tmp/hreaders______.txt
		done
	else
		echo -e "\n/tmp/hreaders______.txt is already exist, we are going to re-use it..\n"
		cat /tmp/hreaders______.txt
		echo
	fi
	read -p "Enter lag time (eg: 10s, 1m, etc ..) " lag
	>/tmp/last_output.txt
	iteration_n=0
	while true; do
		if ! ((iteration_n % 15)); then
			echo -n "                "
			IFS=$'\n'
			for i in $(cat /tmp/hreaders______.txt); do 
				pad_to_len "$i" $PADDING
				echo -en "$padded_string"
			done | grep '\|.'
			# cat /tmp/hreaders______.txt | grep '\|.'
		fi
		let "iteration_n++"
		echo -en "$(date +%T) - $lag - "
		last_output=$(cat /tmp/last_output.txt | sed 's/\t$//g' | sed 's/\ \{1,\}/\t/g')
		IFS=$'\t' read -r -a last_output_array <<< "$last_output"
		current_output=()
		while IFS= read -r com; do
			output=$(eval "$com")
			current_output+=("$output")
			len="${#current_output[@]}"
			pad_to_len "$output" $PADDING
			echo -en "$padded_string"
			# echo -en "$output"
		done < '/tmp/commands' > /tmp/last_output.txt
		echo -n $(cat /tmp/last_output.txt)
		echo -en "   |   "
		for (( i=0; i<$len; i++ )); do
			if [ -z "$last_output" ]; then
				diff_=""
			else
				current_output_i="${current_output[$i]}"
				last_output_i="${last_output_array[$i]}"
				diff_=$(echo "$current_output_i-$last_output_i"|bc -l)
				if [[ $diff_ -eq 0 ]]; then
					diff_="--"
				fi
			fi
			# pad_to_len "$diff_" $PADDING
			# echo -en "$padded_string"
			echo -en "$diff_\t"
		done
		sleep $lag 
		echo
	done 
}

declare -f get_swe_link_for_repo
get_swe_link_for_repo(){
	if [[ -z $1 ]]; then
		user_repo=$(git remote get-url origin | sed 's/.git$//g' | cut -d/ -f4-5 | sed 's/\//__/g')
	else
		user_repo=$(echo "$1" | sed 's/https:\/\/github.com\///g' | sed 's/\//__/g')
	fi
	echo "https://swe-bench-plus.turing.com/repos/$user_repo?filter=%7B%22minDate%22%3A%222024-11-01%22%7D"
}

export -f png
export -f copy_variable_to_clipboard
export -f data_read_clipboard_check_duplicates_in_series
export -f data_read_clipboard_check_show_duplicates_lines
export -f print_numbers_after_lag
export -f data_file_read_dataframe_and_copy_to_clipboard
export -f pad_to_len
export -f get_swe_link_for_repo








PYTHONPATH="/amir_bin/:/usr/bin/python3"
# PYTHONPATH="$PYTHONPATH:/home/amir/.local/lib/python3.10/site-packages"
export PYTHONPATH=$PYTHONPATH

if [[ "$PWD" == "/home/amir/Multimodelity" ]] || [[ "$PWD" == "/media/70GB/Downloads/Google/Multimodality/Multimodelity" ]]; then
	eval "$(register-python-argcomplete ./start_to_end.py)"
fi


declare -f get_repo_link_from_dot_git_dir_func
get_repo_link_from_dot_git_dir_func(){
	repo=$(git remote get-url origin)
	xclip -selection clipboard <<< "$repo"
}

export -f get_repo_link_from_dot_git_dir_func


# alias fast_api_TaskPilo="/home/amir/github/Learning/fastAPI-project/venv/bin/python3 -m uvicorn TaskPilot.main:app --reload"
alias fast_api_SWE="directory=/home/amir/github/Turing2/SWE; cd $directory && $directory/SWE_FastAPI_0/venv/bin/python3 -m uvicorn SWE_FastAPI_0.main:app --reload"

