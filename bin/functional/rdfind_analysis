#!/usr/bin/ipython3

"""
<rdinfd> Linux me duplicate files find karny ka package h, is ki command ye h (rdfind .), is command sy 1 file <results.txt> ganerate hoti h, jis me sari duplicated files k names or some info hoti h

>>> head results.txt
# Automatically generated
# duptype id depth size device inode priority  name
DUPTYPE_FIRST_OCCURRENCE 3598  6 1 2065 16571  1 ./DataScince/NLP/Python Natural Language Processing/github_repo_Author/web_scraping_test/web_scraping_test/__init__.py
DUPTYPE_WITHIN_SAME_TREE -3598 7 1 2065 8822   1 ./DataScince/NLP/Python Natural Language Processing/github_repo2/Chapter02/web_scraping_test/web_scraping_test/__init__.py
DUPTYPE_FIRST_OCCURRENCE 3273  5 23 2065 8720  1 ./DataScince/NLP/Python Natural Language Processing/github_repo2/.git/HEAD
DUPTYPE_WITHIN_SAME_TREE -3273 5 23 2065 2825  1 ./DataScince/Statistics/Learning-Statistics-with-R/github/.git/HEAD
DUPTYPE_WITHIN_SAME_TREE -3273 5 23 2065 12141 1 ./DataScince/NLP/Python Natural Language Processing/github_repo_Author/.git/HEAD
DUPTYPE_FIRST_OCCURRENCE 3704  6 27 2065 3609  1 ./DataScince/Statistics/Learning-Statistics-with-R/github/bookdown/scripts/hello.R
DUPTYPE_WITHIN_SAME_TREE -3704 6 27 2065 6430  1 ./DataScince/Statistics/Learning-Statistics-with-R/github/original/scripts/hello.R

to is (results.txt) file me mojud files me sy required files remove karny k lye me ny ye script banai h

"""

import sys
from pandas import DataFrame, concat
import os

print("""

#####################################################################
# At any point you can press CTRL+C to skip the process, and delete #
# files that you marked till that time                              #
#####################################################################

""")

x = open("results.txt", 'r').read().splitlines()[2:-1]
if not x:
	print("\nThere is no duplicate files in results.txt\nExiting ......\n")
	sys.exit(0)

x = list(zip(
	[i.startswith("DUPTYPE_FIRST_OCCURRENCE") for i in x], 
	[' '.join(i.split()[7:]).replace("./", '') for i in x]
	))


df = DataFrame(x)

def GET_SIZE(x):
	try:
		return os.path.getsize(x)/1024
	except:
		try:
			return os.path.getsize(x.replace("\)", ") "))/1024
		except:
			return None
		return None

def func_(val):
	global for_delete_size
	val = node[int(val)]
	DELTE_IT.append(val)
	for_delete_size += os.path.getsize(val)
	print(f"************ <{val}> added to REMOVE list ************")

#sys.exit()

df['size_KB'] = df[1].apply(GET_SIZE)
print(f"\n\nThere are {len(df)} files, among them {df[0].sum()} are unique")
print(f"The total size is {df.size_KB.sum()} bytes, and the unique files size is {df.loc[df[0].eq(True)].size_KB.sum()} bytes\n\n")

df[3] = None
df.iloc[df[df[0].eq(True)].index.to_list(), 3] = list(range(df[0].eq(True).sum()))
df[3] = df[3].fillna(method='ffill')

print("\n\n############# Extenstions Distribution #############\n")
df[4] = df[1].str.split("/").str[-1].str.split(".").str[-1]

df = df[df.size_KB.notna()]
df = df[~df[3].isin(df[3].value_counts().where(lambda x:x==1).dropna().index.to_list())]


m_1 = df.groupby(4).agg({"size_KB" : sum}).div(1024).astype(int).reset_index().rename(columns={4: "Extention", 	'size_KB' : 'Total size (MB)'}).sort_values("Total size (MB)", ascending=False).reset_index(drop=True)

count_ = df[1].str.split("/").str[-1].str.split(".").str[-1].value_counts()

m_2 = count_.reset_index().rename(columns={"index" : "Extention", 1 : "Count"}) 
m = m_1.merge(m_2, on="Extention", how='outer')
print(m.to_string())
ans_ = input("\nChoose extantin(s)\nIf 1+ extenstions saperate them by pipe '|', eg(pdf|html|txt)\nFor choose all extantions press Enter\n")
if ans_.strip() != '':
	df = df[df[4].isin(ans_.split("|"))]
	df = df[~df[3].isin(df[3].value_counts().where(lambda x:x==1).dropna().index.to_list())]


x = input("\nAre you need some specific substring in file_names? if yes \n\t1- include\n\t2- exclude\n\t press any key to skip\n")

if x in ['1', '2']:
	a = input("\nEnter substring, if multiple strings saperate them by | :\n")	
	if x == '1':
		#df = df[df[1].str.contains(a)]
		df = df[df[3].isin(list(df[df[1].str.contains(a)][3].unique()))]
	elif x == '2':
		df = df[~df[1].str.contains(a)]
	df = df[~df[3].isin(df[3].value_counts().where(lambda x:x==1).dropna().index.to_list())]


df.to_csv('/home/amir/._df_1.csv', index=False)
input("The df is saved as /home/amir/._df_1.csv\nPleas enter any key to proceed: ")

r = sorted(df.groupby(3), key=lambda x:x[1].size_KB.max(), reverse=True)
r = [i[1][1].to_list() for i in r]
DELTE_IT = []

for_delete_size = 0
delete_items_qty = 0

for node in r:
	try:
		print("\n<<  ==========================================  >>")
		print(f"Size of deletion: {round(for_delete_size/1024/1024,2)} MB")
		print(f"Delete items Qty: {delete_items_qty} (among {df[0].sum()} unique files)\n")
		for e,i in enumerate(node):
			com = f"""echo "{e}- $(du -sh '{i}')" """
			os.system(com)
		input_ = input("\nFor open all these files type 'o' else\nEnter index for deletion\n\t- single index, (eg: 0)\n\t- Multiple indexes (saperated by dot), eg(0.3.4)\n\t- Skip (press any key):\n")
		if input_ in ["o", "'o'"]:
			for i in node:
				com = f"gopen '{i}' 2>/dev/null"
				os.system(com)
			input_ = input("\nEnter index for deletion\n\t- single index, (eg: 0)\n\t- Multiple indexes (saperated by dot), eg(0.3.4)\n\t- Skip (press any key):\n")
		input_ = input_.replace(" ", "")
		if "." in input_: # multi index
			try:
				inp = input_.split(".")
				for input_ in inp:
					delete_items_qty += 1
					func_(input_)
			except:	
				raise Exception("Wrong input\nExiting ......\n")
				sys.exit(1)
		else: # single index
			try: # single index
				delete_items_qty += 1
				func_(input_)
			except: # skip
				pass
	except:
		break

if DELTE_IT:
	print("\n\n\n----------------\nFiles to delete:")
	# print(*DELTE_IT, sep="\n\t")
	print('\n\t' + '\n\t'.join(DELTE_IT))
	input_ = input("\n\nWe are going to delete these files, press y to continue: ")
	if input_ == 'y':
		print("")
		for i in DELTE_IT:
			print(f"Removing {i} ..........")
			os.remove(i)
else:
	print("\nYou didn't choose any file to delete\nExiting ........")
print()
