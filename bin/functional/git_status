#!/usr/bin/env ipython3
from termcolor import colored
import sys
import os

if (list(os.popen('git_status_orignal  | grep -E -v "^$|^>>>>>>>>>>|^Your branch is up to date with|working tree clean|^On branch" | wc -l'))[0].strip())  == '0':
	raise Exception("\nNo new commit\nAborting......\n\n")

os.chdir("/home/amir/github")
files_to_remove = list(map(str.strip, os.popen("find . -name geckodriver.log 2>/dev/null")))
for f_t_r in files_to_remove:
	os.remove(f_t_r)

if "git_files.txt" in os.listdir():
	os.system("rm git_files.txt")
aa = True

not_to_commit_repos = ["lfd-projects", 'Fantasy_cricket_app_Django']
if not_to_commit_repos:
	print("************************************")
	for i in not_to_commit_repos:
		print(f"<{i}> repository excluded from this opereation\n")

repos = os.listdir() # list of all local repositories
repos = [repo for repo in repos if (not repo in not_to_commit_repos) and not (repo.startswith(".")) and (os.path.isdir(repo))]


only_new_files     = "/home/amir/.only_new_files"
only_updated_files = "/home/amir/.only_updated_files"

print("\n\n")

for repo in repos:
	os.chdir(f"/home/amir/github/{repo}")

	# only new files:
	if os.path.exists(only_new_files):
		os.remove(only_new_files)
	os.system("git ls-files --others --exclude-standard > /home/amir/.only_new_files")
	if os.path.exists(only_new_files):
		new = open(only_new_files, 'r').read().splitlines()
		if new:
			for new_file in new:
				if not os.path.exists(new_file):
					continue
				size_bytes = os.path.getsize(new_file)
				size_mb = round(size_bytes / 1024 / 1024)
				if size_mb > 48:
					input(f"\n\nThis file ({new_file}) is very large ({size_mb}MB), We ignore it now, but you should add it in .gitignore\nEnter any key to proceed")
					continue
				print(f">>> Added new file: {repo}/{new_file}")
				com = f"""git add '{new_file}'; git commit -m "new" """
				os.system(com)

	# only modified files:
	if os.path.exists(only_updated_files):
		os.remove(only_updated_files)
	os.system("git ls-files -m > /home/amir/.only_updated_files")
	if os.path.exists(only_updated_files):
		updated_files = open(only_updated_files, 'r').read().splitlines()
		if updated_files:
			for updated_file in updated_files:
				if not os.path.exists(updated_file):
					continue
				size_bytes = os.path.getsize(updated_file)
				size_mb = round(size_bytes / 1024 / 1024)
				if size_mb > 48:
					input(f"\n\nThis file ({updated_file}) is very large ({size_mb}MB), We ignore it now, but you should add it in .gitignore\nEnter any key to proceed")
					continue
				os.system("clear")
				print(f"\n\n============================== {repo}/{updated_file} ==============================\n")
				com = f"git diff --color '{updated_file}'  > /home/amir/.x ; cat /home/amir/.x" # <--color> presever coloring
				os.system(com)

				commit = input("\nEnter your commit: ")
				if commit == "":
					continue
				com = f"""git add '{updated_file}'; git commit -m "{commit}" """
				os.system(com)
				print("\n\n\n-------------------------------------------------------")

q = 0
for repo in repos:
	os.chdir(f"/home/amir/github/{repo}")
	try:
		q += int(list(os.popen("git status | grep '(use \"git push\"' | wc -l"))[0].strip())
	except:
		pass	
	# q += len(list(os.popen("`git ls-files --others --exclude-standard`")) + list(os.popen("git ls-files -m")))
if q > 0:
	ans = input("\n\nsab kush commint ho chuka h, Now you can push.\nAre you need to push? [y|n]:   ")
	if ans == "y":
		os.system("git_push 1")

os.remove(only_new_files)
os.remove(only_updated_files)
