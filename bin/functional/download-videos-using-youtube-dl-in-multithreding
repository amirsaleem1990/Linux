#!/usr/bin/python3
# https://stackoverflow.com/questions/50197643/youtbe-dl-multiple-downloads-at-the-same-time
import multiprocessing.dummy
import subprocess
import os
import traceback
import sys

def download(url):
	try:
		if low_quality:
			subprocess.check_call(['youtube-dl', '-f', 'bestvideo[height<=480]+bestaudio/best[height<=480]', '--no-playlist', url])
		else:
			subprocess.check_call(['youtube-dl', '--no-playlist', url])
		open("downloaded.txt", "a").write(url+"\n")
	except:
		e_ = traceback.format_exc()
		print("\n\nERROR --------------------------------------------------")
		print(f"url: {url}")
		print(e_)
		print("---------------------------------------------- Error END\n\n")
		open(error_file, 'a').write(f'---------------------------------\n\n\nUrl:{url}\n{e_}\n\n')

def func():
	try:
		downloaded = open("downloaded.txt", "r").read().splitlines()
		arr = [i for i in arr if not i in downloaded]
	except:
		pass		
	p = multiprocessing.dummy.Pool()
	return p

def func2():
	arr_exculded = []
	for i in exclude.split("|"):
		for url in arr:
			if not i.lower().strip() in url:
				arr_exculded.append(url)
	return arr_exculded

error_file = "/home/amir/.downloading_errors.txt"
exclude = input("Words to exclude (if multiple separate them by '|')  ")

before=int(list(os.popen("du -s -BM | cut -dM -f1"))[0].strip())

if os.path.exists(error_file):
	os.remove(error_file)

low_quality = False
ans = input("Are you need to download low quality videos? [yes|no]: ").strip().lower()
if  ans == "yes":
	if input("Are you sure? [yes|no]").lower().strip() == "yes":
		low_quality = True

part_files_exists = False
try:
	arr = [i for i in set(open("mp4_links.txt", "r").read().splitlines()) if i.strip()]
	part_files = [i for i in os.listdir() if i.endswith(".part")]
	if part_files: 
		part_files_str = ' '.join(part_files)
		x = [i for i in arr if i.split("/")[-1] in part_files_str]
		if x:
			arr = x
			part_files_exists = True
except:
	try:
		file_name = sys.argv[1]
	except:	
		import readline
		readline.parse_and_bind("tab: complete")
		file_name = input("file <mp4_links.txt> not found, please Enter your file name: ")
	arr = [i for i in set(open(file_name, "r").read().splitlines()) if i.strip() and (not i.startswith("#"))]


p = func()
try:
	if exclude:
		arr = func2()
	p.map(download, arr)
except KeyboardInterrupt:
	sys.exit(1)

if part_files_exists:
	arr = [i for i in set(open("mp4_links.txt", "r").read().splitlines()) if i.strip()]	
	if exclude:
		arr = func2()
	p = func()
	try:
		p.map(download, arr)
	except KeyboardInterrupt:
		sys.exit(1)

if os.path.exists(error_file):
	errors = open(error_file, 'r').read()
	print("\n\n\n*********** Error URLs ***********\n")
	print(errors)

print(f"\n\nErrors saved as {error_file}\n\n")
after=int(list(os.popen("du -s -BM | cut -dM -f1"))[0].strip())
downloaded_size= after - before
print (f"\n\n................... Downloaded {downloaded_size} MB ................\n\n")
