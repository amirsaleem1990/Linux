#!/usr/bin/env python3
import os
import sys
os.chdir("/home/amir/github/")
if len(sys.argv) == 1:
    inp = input("\nYou did not passed '1' option, we we can not execute check_github_files_size.sh script, Are you need to continue? [y|n] ")
    if inp == "y":
        inp = "0"
        pass
    else:
        raise Exception("\nAborting.......\n")
else:
    inp = sys.argv[1]
    if not inp in ["1", "2"]:
        raise Exception(f"\n\nWrong option \{{inp}\}\nAborting..........\n")



# # os.system("bash git_files.sh")
# os.system('find . -name "*" > git_files.txt')
# with open("git_files.txt", "r") as file:
# 	all_files = file.read().splitlines()
# for i in all_files:
#     if not "/.git/" in i:
#     	# if i.count("/") > 1:
#         # os.stat(i).st_size return the size in Bytes
#         # https://www.tutorialspoint.com/python/os_stat.htm
#         if os.stat(i).st_size > 1048576*99:
#             print(f"\n\n\n\n******* {i} is larger then 49MB *******\n\n\n\n")
#             import sys
#             # if int(input("Proceed or STOP\n1-Proceed\t\t2-STOP: \t")) == 2:
# 	           #  os.remove("git_files.txt")
#             sys.exit()
# os.remove("git_files.txt")
com = f"check_github_files_size.sh {inp}"
exit_code = os.system(com) # 0 for not execution, I don't need to run this command 
if exit_code != 0:
	import sys
	sys.exit(2)
not_to_commit_repos = ["lfd-projects", "Time-Left-for-Namaz-time-Android-app", 'Fantasy_cricket_app_Django']
if not_to_commit_repos:
	print("************************************")
for i in not_to_commit_repos:
	print(f"<{i}> repository not commited nor pushed")
print("\n\n")
repos = os.listdir() # list of all local repositories
repos = [repo for repo in repos if not repo in not_to_commit_repos]
for repo in repos:   
    if (not repo.startswith(".")) and (not "." in repo): # if that repo is not a hidden file <in linux hiddin files names starts with . dot
        os.chdir(repo) # go to that local repo
        git_status = os.popen("git status").read() # read current status

        os.system("git branch -M master")

        if '(use "git push" to publish your local commits)' in git_status:
        	os.system("git push || git push -u origin master") # git push -u origin main
        elif "Untracked files" in git_status or "Changes not staged for commit" in git_status:
            aa = [i.strip() for i in git_status.splitlines()]
            print(f"**********{repo}**********")
            for i in aa:
	            if i and i.startswith("Untracked files") or i.startswith("Changes not staged for commit"):
	            	os.system("git add . ; git commit -m 'updated'; git push -u origin master") # || git push -u origin main
            print("\n\n")
        os.chdir("..")