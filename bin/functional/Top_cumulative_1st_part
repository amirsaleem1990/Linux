#!/bin/bash
rm -f ~/AB_{cpu,ram}.txt
RED="\033[0;31m"
normal="\033[0m"
# if [[ $1 == 'cpu' ]]; then
# 	sort_by=1
# else
# 	if [[ $1 == 'ram' ]]; then
# 		sort_by=2
# 	else
# 		echo "The argument of this script is either <cpu> or <ram>."
# 		exit 
# 	fi
# fi


if [[ $1 == 1 ]] ; then
	detailed=1
else
	detailed=0
	echo -e "\n************ Short list ************\n\n"
fi

sort_by=1

echo ''
IFS=$'\n'

echo -e "`ps -eo user,pid,%cpu,%mem,comm  | grep amir | sed 's/amir     //g' |  grep -v '0.0  0.0' \
	| sed 's/^ //g' \
	| sed 's/ \{1,\}/ /g' | sed 's/^ //g' | cut -d ' ' -f2-10
	`" > ~/ab.txt
	# |tee /home/amir/.a. \
	# | tac \

## cat ~/ab.txt | cut -d ' ' -f2-10 > ~/.amb.txt
## mv ~/.amb.txt  ~/ab.txt

cat ~/ab.txt | cut -d ' ' -f1,2  > ~/.first_two_cols.txt
cat ~/ab.txt | cut -d ' ' -f3-5 | sed 's/ /-/g' > ~/.last_col.txt

paste ~/.first_two_cols.txt  ~/.last_col.txt > ~/ab.txt
cat ~/ab.txt | sed 's/\t/ /g' | sed 's/ /,/g' > ~/ab.txT
yes | mv ~/ab.txT ~/ab.txt
echo "" > ~/.amb.txt

for i in `cat ~/ab.txt | cut -d, -f3 | sort | uniq -c | sed 's/      //g' | sed 's/^\ \{1,\}//g' | grep -v '^1 ' | cut -d " " -f2-4 | sort -u`; do
	a=`cat ~/ab.txt | grep $i | cut -d, -f1 | paste -sd+ | bc`
	if [[ "${a:0:1}" == "." ]] ; then
		a="0"$a
	fi 
	if [[ $a == 0 ]]; then
		a="0.0"
	fi
	b=`cat ~/ab.txt | grep $i | cut -d, -f2 | paste -sd+ | bc`
	if [[ "${b:0:1}" == "." ]] ; then
		b="0"$b
	fi 
	if [[ $b == 0 ]]; then
		b="0.0"
	fi
	echo "$a,$b,$i" >> ~/.amb.txt
	cat ~/ab.txt | grep -v $i > ~/.AB.txt
	yes | mv ~/.AB.txt ~/ab.txt
done 
sed -i '/^$/d' ~/.amb.txt
python3 -c "from psutil import virtual_memory ; open('/home/amir/.MM', 'w').write('\n'.join([str(round((float(i.split(',')[1]) / 100 * virtual_memory().total / 1024 **2 ))) for i in  open ('/home/amir/ab.txt', 'r').read().splitlines()]+['\n']))"
paste  ~/.MM ~/ab.txt  -d,  | grep -v ',$'  >  ~/.AB.txt
# mv  ~/ab.txt ~/.AB.txt

python3 -c "from psutil import virtual_memory ; open('/home/amir/.MM2', 'w').write('\n'.join([str(round((float(i.split(',')[1]) / 100 * virtual_memory().total / 1024 **2 ))) for i in  open ('/home/amir/.amb.txt', 'r').read().splitlines() if i]+['\n']))"
paste  ~/.MM2 ~/.amb.txt  -d,  | grep -v ',$'  >  ~/.AB_2.txt
cat ~/.AB_2.txt ~/.AB.txt  >  ~/ab.txt
# mv ~/.SS ~/.AB.txt


# cat ~/.amb.txt ~/.AB.txt | grep -v ',$' > ~/ab.txt
# exit

cpu_total=`sed '/^$/d' ~/ab.txt | cut -d, -f2 | paste -sd+ | bc`
cpu_total=`echo "scale=3; $cpu_total / 8" | bc | awk '{print int($1)}'`

# echo "CPU,MEM,COMMAND" > ~/.AB.txt
echo "MEM(MB),CPU,MEM,COMMAND" > ~/.AB_cpu.txt
echo "MEM(MB),CPU,MEM,COMMAND" > ~/.AB_ram.txt
paste_to_files() {
	echo "$1" >> ~/.AB_cpu.txt
	echo "$1" >> ~/.AB_ram.txt
}
func_2(){
	n=""
	if [[ `echo $cpu_total'<'10 | bc -l` == 1 ]] ; then 
		n=" "
	fi
	
	# echo -e "\n\n${RED}****************************************************************${normal}"
	f="\n\n****************************************************************\n"
	
	# echo -n  "Cpu : $cpu_total $n%   "
	f=`echo "$f""Cpu : $cpu_total $n%   "`


	
	for i in $(seq 1 `echo "$cpu_total / 2" | bc`); do 
		# echo -n "-"
		f=`echo "$f""-"`
	done

	f=`echo "$f""\n"`	
	# echo

	ram=`free | head -2 | tail -1 | sed 's/^Mem: //g' | sed 's/ \{2,\}/,/g' | sed 's/^,//g'`
	ram_total=`echo $ram | cut -d, -f1`
	ram_used=`echo $ram | cut -d, -f2`
	ram_used_perc=`echo "scale=3; $ram_used/$ram_total" | bc`
	ram_used_perc=`echo "$ram_used_perc * 100" | bc`
	ram_used_perc=${ram_used_perc%.*}

	swap=`free  | tail -1 | sed 's/^Swap: //g' | sed 's/ \{2,\}/,/g' | sed 's/^,//g'`
	if [[ $swap != "0,0,0" ]] ; then
		swap_total=`echo $swap | cut -d, -f1`
		swap_used=`echo $swap | cut -d, -f2`
		swap_used_perc=`echo "scale=3; $swap_used/$swap_total" | bc`
		swap_used_perc=`echo "$swap_used_perc * 100" | bc`
		swap_used_perc=${swap_used_perc%.*}
	fi
	
	# echo -n Ram\ \:\ 
	f=`echo "$f""Ram : "`

	# echo -n  "$ram_used_perc %   "
	f=`echo "$f""$ram_used_perc %   "`

	for i in $(seq 1 `echo "$ram_used_perc / 2"     | bc`); do
		# echo -n "-"
		f=`echo "$f""-"`
	done
	f=`echo "$f""\n"`
	# echo 

	if [[ $swap_used_perc -eq "" ]] ; then
		:
	else
		if [[ $swap != "0,0,0" ]] ; then
			:
		else
			# echo -n Swap\:\ 
			f=`echo "$f""Swap:"`

			# echo -n  "$swap_used_perc %   "
			f=`echo "$f""$swap_used_perc %   "`

			for i in $(seq 1 `echo "$swap_used_perc / 2"     | bc`); do
				# echo -n "-"
				f=`echo "$f""-"`
			done
			# echo 
			f=`echo "$f""\n\n"`
		fi
	fi

	# echo -e "${RED}****************************************************************${normal}\n\n"
	f=`echo "$f""****************************************************************\n\n"`
	

	echo $f
}
fun() {
	# echo '' >> ~/.AB.txt
	paste_to_files ''
	
	# echo "<<<,CPU,<<<>>>,>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> ~/.AB_cpu.txt
	# echo "<<<,MEM,<<<>>>,>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> ~/.AB_ram.txt
	
	echo "===,===,===,======= CPU ============================" >> ~/.AB_cpu.txt
	echo "===,===,===,======= RAM ============================" >> ~/.AB_ram.txt

	# sort -t, -k $sort_by -n ~/ab.txt | sed 's/0\.0/---/g' >> ~/.AB.txt
	if [[ $detailed == 1 ]]; then
		sort -t, -k 2 -n ~/ab.txt | sed 's/0\.0/---/g'              >> ~/.AB_cpu.txt
		sort -t, -k 3 -n ~/ab.txt | sed 's/0\.0/---/g'              >> ~/.AB_ram.txt
	else
		sort -t, -k 2 -n ~/ab.txt | sed 's/0\.0/---/g' | grep -v \- >> ~/.AB_cpu.txt
		sort -t, -k 3 -n ~/ab.txt | sed 's/0\.0/---/g' | grep -v \- >> ~/.AB_ram.txt
	fi

	# echo "CPU,MEM,COMMAND" >> ~/.AB.txt
	# paste_to_files "MEM(MB),CPU,MEM,COMMAND"

	# cat ~/.AB.txt | column -t -s, | grep --color "\|CPU\|MEM\|COMMAND"

	# rm -f ~/.{amb,AB}.txt ~/ab.txt

	f=`func_2`

	echo "===,===,===,======= CPU ============================" >> ~/.AB_cpu.txt
	echo "===,===,===,======= RAM ============================" >> ~/.AB_ram.txt
	#--------------------------------------------------------
	# ram_total=`sed '/^$/d' ~/ab.txt | cut -d, -f2 | paste -sd+ | bc`
	# ram_total=`echo $ram_total					   | awk '{print int($1)}'`
	# if [[ $ram_total -eq 0 ]]; then
	# 	sleep 1
	# 	Top_cumulative $1
	# fi
	# echo -n  "ram : $ram_total %   "
	# for i in $(seq 1 `echo "$ram_total / 2"     | bc`); do echo -n "-" ; done
	# echo
	#--------------------------------------------------------

	rm -f ~/{ab,.first_two_cols,.last_col,.amb.AB}.txt ab.txT
	
}
fun
cat ~/.AB_cpu.txt | cut -d, -f2-4 > ~/.AB_cpu_temp.txt
yes | mv ~/.AB_cpu_temp.txt ~/.AB_cpu.txt
paste -d "," ~/.AB_cpu.txt ~/.AB_ram.txt | column -t -s, > .AB.txt

# cat .AB.txt  | sed '/^$/d'
# echo -e "$f" | sed '/^$/d'

echo -e "$f" | sed '/^$/d' > ~/.LMSF