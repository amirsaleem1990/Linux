#!/bin/bash
rm -f /tmp/process_info_cpu_{cpu,ram}.txt
/usr/bin/rm -rf /tmp/process_info.txt /tmp/info_aggregated.pkl 2>/dev/null
RED="\033[0;31m"
normal="\033[0m"
# if [[ $1 == 'cpu' ]]; then
# 	sort_by=1
# else
# 	if [[ $1 == 'ram' ]]; then
# 		sort_by=2
# 	else
# 		echo "The argument of this script is either <cpu> or <ram>."
# 		exit 
# 	fi
# fi


if [[ $1 == 1 ]] ; then
	detailed=1
else
	detailed=0
	echo -e "\n************ Short list ************\n*(for long list give '1' as a perameter)\n"
fi

sort_by=1

echo ''
IFS=$'\n'

ps -eo user,pid,%cpu,%mem,comm | grep ^amir | grep -v '0.0  0.0' | sed 's/amir     //g; s/^ //g; s/ \{1,\}/ /g; s/^ //g' | cut -d ' ' -f2-10 > /tmp/process_info.txt

## cat /tmp/process_info.txt | cut -d ' ' -f2-10 > /tmp/memory_by_process.txt
## mv /tmp/memory_by_process.txt  /tmp/process_info.txt

cat /tmp/process_info.txt | cut -d ' ' -f1,2  > /tmp/first_two_cols.txt
cat /tmp/process_info.txt | cut -d ' ' -f3-5 | sed 's/ /-/g' > /tmp/last_col.txt

paste /tmp/first_two_cols.txt  /tmp/last_col.txt > /tmp/process_info.txt
cat /tmp/process_info.txt | sed 's/\t/ /g; s/ /,/g' > /tmp/process_info_TEMP.txt
yes | mv /tmp/process_info_TEMP.txt /tmp/process_info.txt
echo "" > /tmp/memory_by_process.txt

for i in `cat /tmp/process_info.txt | cut -d, -f3 | sort | uniq -c | sed 's/      //g; s/^\ \{1,\}//g' | grep -v '^1 ' | cut -d " " -f2-4 | sort -u`; do
	a=`cat /tmp/process_info.txt | grep $i | cut -d, -f1 | paste -sd+ | bc`
	if [[ "${a:0:1}" == "." ]] ; then
		a="0"$a
	fi 
	if [[ $a == 0 ]]; then
		a="0.0"
	fi
	b=`cat /tmp/process_info.txt | grep $i | cut -d, -f2 | paste -sd+ | bc`
	if [[ "${b:0:1}" == "." ]] ; then
		b="0"$b
	fi 
	if [[ $b == 0 ]]; then
		b="0.0"
	fi
	echo "$a,$b,$i" >> /tmp/memory_by_process.txt
	cat /tmp/process_info.txt | grep -v $i > /tmp/process_info_TEMP.txt
	yes | mv /tmp/process_info_TEMP.txt /tmp/process_info.txt
done 
sed -i '/^$/d' /tmp/memory_by_process.txt
/home/amir/.venv_base/bin/python3 -c "from psutil import virtual_memory ; open('/tmp/MM', 'w').write('\n'.join([str(round((float(i.split(',')[1]) / 100 * virtual_memory().total / 1024 **2 ))) for i in  open ('/tmp/process_info.txt', 'r').read().splitlines()]+['\n']))"
paste  /tmp/MM /tmp/process_info.txt  -d,  | grep -v ',$'  >  /tmp/AB.txt
# mv  /tmp/process_info.txt /tmp/AB.txt

/home/amir/.venv_base/bin/python3 -c "from psutil import virtual_memory ; open('/tmp/MM2', 'w').write('\n'.join([str(round((float(i.split(',')[1]) / 100 * virtual_memory().total / 1024 **2 ))) for i in  open ('/tmp/memory_by_process.txt', 'r').read().splitlines() if i]+['\n']))"
paste  /tmp/MM2 /tmp/memory_by_process.txt  -d,  | grep -v ',$'  >  /tmp/process_info_cpu_2.txt
cat /tmp/process_info_cpu_2.txt /tmp/AB.txt  >  /tmp/process_info.txt
# mv /tmp/SS /tmp/AB.txt


# cat /tmp/memory_by_process.txt /tmp/AB.txt | grep -v ',$' > /tmp/process_info.txt
# exit

cpu_total=`sed '/^$/d' /tmp/process_info.txt | cut -d, -f2 | paste -sd+ | bc`
cpu_total=`echo "scale=3; $cpu_total / 8" | bc | awk '{print int($1)}'`

# echo "CPU,MEM,COMMAND" > /tmp/AB.txt
echo "MEM(MB),CPU,MEM,COMMAND" > /tmp/process_info_cpu_cpu.txt
echo "MEM(MB),CPU,MEM,COMMAND" > /tmp/process_info_cpu_ram.txt
paste_to_files() {
	echo "$1" >> /tmp/process_info_cpu_cpu.txt
	echo "$1" >> /tmp/process_info_cpu_ram.txt
}
func_3(){
	_total_=`echo $1 | cut -d, -f1`
	_used_=`echo $1 | cut -d, -f2`
	_used_perc_=`echo "scale=3; $_used_/$_total_" | bc`
	_used_perc_=`echo "$_used_perc_ * 100" | bc`
	_used_perc_=${_used_perc_%.*}
}

func_4(){
	# echo -n Ram\ \:\ 
	f=`echo "$1""$3"`

	# echo -n  "$ram_used_perc %   "
	f=`echo "$f""$2 %   "`

	for i in $(seq 1 `echo "$2 / 2"     | bc`); do
		# echo -n "-"
		f=`echo "$f""-"`
	done
	f=`echo "$f""\n"`
	# echo 	
}

func_2(){
	n=""
	if [[ `echo $cpu_total'<'10 | bc -l` == 1 ]] ; then 
		n=" "
	fi
	
	# echo -e "\n\n${RED}****************************************************************${normal}"
	f="\n\n****************************************************************\n"
	
	# echo -n  "Cpu : $cpu_total $n%   "
	f=`echo "$f""Cpu  : $cpu_total $n%   "`

	for i in $(seq 1 `echo "$cpu_total / 2" | bc`); do 
		# echo -n "-"
		f=`echo "$f""-"`
	done

	f=`echo "$f""\n"`	
	# echo

	ram=`free | head -2 | tail -1 | sed 's/^Mem: //g' | sed 's/ \{2,\}/,/g' | sed 's/^,//g'`
	func_3 $ram
	ram_total=$_total_
	ram_used=$_used_
	ram_used_perc=$_used_perc_
	# ram_total=`echo $ram | cut -d, -f1`
	# ram_used=`echo $ram | cut -d, -f2`
	# ram_used_perc=`echo "scale=3; $ram_used/$ram_total" | bc`
	# ram_used_perc=`echo "$ram_used_perc * 100" | bc`
	# ram_used_perc=${ram_used_perc%.*}

	swap=`free  | tail -1 | sed 's/^Swap: //g' | sed 's/ \{2,\}/,/g' | sed 's/^,//g'`
	if [[ $swap != "0,0,0" ]] ; then
		func_3 $swap
		swap_total=$_total_
		swap_used=$_used_
		swap_used_perc=$_used_perc_
		# swap_total=`echo $swap | cut -d, -f1`
		# swap_used=`echo $swap | cut -d, -f2`
		# swap_used_perc=`echo "scale=3; $swap_used/$swap_total" | bc`
		# swap_used_perc=`echo "$swap_used_perc * 100" | bc`
		# swap_used_perc=${swap_used_perc%.*} # float to integer
	fi

	func_4 $f $ram_used_perc "Ram : "

	if [[ $swap_used_perc == "" ]] ; then
		:
	else
		if [[ $swap == "0,0,0" ]] ; then
			:
		else
			func_4 $f $ram_used_perc "Swap: "
		fi
	fi

	# echo -e "${RED}****************************************************************${normal}\n\n"
	f=`echo "$f""****************************************************************\n\n"`
	

	echo $f
}
	fun() {
	# echo '' >> /tmp/AB.txt
	paste_to_files ''

	# echo "<<<,CPU,<<<>>>,>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> /tmp/process_info_cpu_cpu.txt
	# echo "<<<,MEM,<<<>>>,>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> /tmp/process_info_cpu_ram.txt

	echo "=======,===,===,======= CPU ============================" >> /tmp/process_info_cpu_cpu.txt
	echo "=======,===,===,======= RAM ============================" >> /tmp/process_info_cpu_ram.txt

	# sort -t, -k $sort_by -n /tmp/process_info.txt | sed 's/0\.0/---/g' >> /tmp/AB.txt
	if [[ $detailed == 1 ]]; then
		sort -t, -k 2 -n /tmp/process_info.txt | sed 's/0\.0/---/g'              >> /tmp/process_info_cpu_cpu.txt
		sort -t, -k 3 -n /tmp/process_info.txt | sed 's/0\.0/---/g'              >> /tmp/process_info_cpu_ram.txt
	else
		sort -t, -k 2 -n /tmp/process_info.txt | sed 's/0\.0/---/g' | grep -v \- >> /tmp/process_info_cpu_cpu.txt
		sort -t, -k 3 -n /tmp/process_info.txt | sed 's/0\.0/---/g' | grep -v \- >> /tmp/process_info_cpu_ram.txt
	fi

	# echo "CPU,MEM,COMMAND" >> /tmp/AB.txt
	# paste_to_files "MEM(MB),CPU,MEM,COMMAND"

	# cat /tmp/AB.txt | column -t -s, | grep --color "\|CPU\|MEM\|COMMAND"

	# rm -f /tmp/{amb,AB}.txt /tmp/process_info.txt

	f=`func_2`

	echo "=======,===,===,======= CPU ============================" >> /tmp/process_info_cpu_cpu.txt
	echo "=======,===,===,======= RAM ============================" >> /tmp/process_info_cpu_ram.txt
	#--------------------------------------------------------
	# ram_total=`sed '/^$/d' /tmp/process_info.txt | cut -d, -f2 | paste -sd+ | bc`
	# ram_total=`echo $ram_total					   | awk '{print int($1)}'`
	# if [[ $ram_total -eq 0 ]]; then
	# 	sleep 1
	# 	Top_cumulative $1
	# fi
	# echo -n  "ram : $ram_total %   "
	# for i in $(seq 1 `echo "$ram_total / 2"     | bc`); do echo -n "-" ; done
	# echo
	#--------------------------------------------------------

	/usr/bin/rm -f /tmp/{ab,.first_two_cols,.last_col,.amb.AB}.txt process_info_TEMP.txt

	}
fun
cat /tmp/process_info_cpu_cpu.txt | cut -d, -f2-4 > /tmp/process_info_cpu_cpu_temp.txt
yes | mv /tmp/process_info_cpu_cpu_temp.txt /tmp/process_info_cpu_cpu.txt
paste -d "," /tmp/process_info_cpu_cpu.txt /tmp/process_info_cpu_ram.txt | column -t -s, > /tmp/AB.txt

# cat .AB.txt  | sed '/^$/d'
# echo -e "$f" | sed '/^$/d'

echo -e "$f" | sed '/^$/d' > /tmp/LMSF