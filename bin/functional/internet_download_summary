#!/bin/bash

file_=/tmp/internet_download_summary
full_file_=/tmp/internet_download_summary_full
/usr/bin/rm -f $file_ $full_file_ 2>/dev/null

recursive=false

control_c() {
	echo -e "\n\n-------------- EXITING ------------------\n"
	python3 <<< '
# import matplotlib.pyplot as plt
# import pandas as pd
# df = pd.read_csv("/tmp/internet_download_summary_full")
# x = pd.to_datetime(df.Time)
# print(f"\n\nTotal time consumed: {str(x.iloc[-1] - x.iloc[0])}\n\n")
# df.set_index("Time").TotalIncrement.plot(kind="line", marker="o")
# plt.title("Total download over time")
# plt.ylabel("Download")
# plt.show()


# mask = df.IncremenalSize.ge(0)
# df.loc[mask].set_index("Time").IncremenalSize.plot(kind="line", figsize=(20,8), grid=True)
# plt.axhline(df.loc[mask].IncremenalSize.mean(), color="red")
# plt.legend(["IncremenalSize", "Average IncremenalSize"])

# plt.xlabel("Time")
# plt.ylabel("IncremenalSize")
# plt.title("IncremenalSize Over Time")
# plt.show()

import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import pandas as pd

# Read the data
df = pd.read_csv("/tmp/internet_download_summary_full")

# Convert the Time column to datetime
x = pd.to_datetime(df.Time)
print(f"\n\nTotal time consumed: {str(x.iloc[-1] - x.iloc[0])}\n\n")

# Create a PDF document
with PdfPages("/tmp/plots.pdf") as pdf:
    # Plot 1: Total download over time
    plt.figure()
    df.set_index("Time").TotalIncrement.plot(kind="line", marker="o")
    plt.title("Total download over time")
    plt.ylabel("Download")
    pdf.savefig()  # saves the current figure into a pdf page
    plt.close()    # close the figure to prevent it from displaying
    
    # Plot 2: Incremental size over time
    mask = df.IncremenalSize.ge(0)
    plt.figure(figsize=(20, 8))
    df.loc[mask].set_index("Time").IncremenalSize.plot(kind="line", grid=True)
    plt.axhline(df.loc[mask].IncremenalSize.mean(), color="red")
    plt.legend(["IncremenalSize", "Average IncremenalSize"])
    plt.xlabel("Time")
    plt.ylabel("IncremenalSize")
    plt.title("IncremenalSize Over Time")
    pdf.savefig()  # saves the current figure into a pdf page
    plt.close()    # close the figure to prevent it from displaying
	'
	evince /tmp/plots.pdf 
	exit 
}

while [ $# -gt 0 ]; do
	case "$1" in
		-s|--sleep_time)
			sleep_time="$2"
			;;
		-e|--extention)
			extention="$2"
			;;
		-h|--help)
			echo -e "
	Usage:

	-s, --sleep_time ........ sleep time (in seconds). default is '60'
	-e, --extention  ........ extention
								default is 'mp4,mkv,webm'
								You can pass multiple such as '--extention mp4,mkv,webm
	-r  --recursive ......... if 'true' the script consider all subdirectories.
	-h, --help  ............. help page
	"
	exit
			;;
		-r|--recursive)
			recursive="$2"
			;;
		*)
			echo -e "
		***************************
		* Error: Invalid argument.*
		***************************
			"
			exit 1
	esac
	shift
	shift
done

echo ""
if [[ -z $sleep_time ]]; then
	echo -e ">>> 'sleep_time' argument not passed, so default (60) is set.\n"
	sleep_time=60
fi

if [[ -z $extention ]]; then
	echo -e ">>> 'extention' argument not passed, so default 'mp4,mkv,webm' is set.\n"
	extention=mp4,mkv,webm
fi



SUM=`du -shL -BM | sed 's/M..//g'`


func_1(){
	IFS=,
	for e in $1 ; do 
		if $2; then
			n_files=$(bc <<< $3+$(find . -iname "*.$e" 2>/dev/null| wc -l))
		else
			n_files=$(bc <<< $3+$(ls | grep -i .$e 2>/dev/null| wc -l))
		fi
	done
	echo $n_files
}

func_2(){
	if $1; then
		n_files=$(find . -iname "*.$2" | wc -l)
	else
		n_files=$(ls | grep -i .$2 | wc -l)
	fi
	echo $n_files
}

IFS=$'\n'
# before_files=`ls -I "*.part" -I "*.ytdl" | wc -l`
# if [[ $( echo $extention | grep -o , ) ]]
multiple_extentions=false
if [[ $(echo $extention | grep -o , | wc -l ) -gt 0 ]] ; then
	multiple_extentions=true
fi

before_files=0
if $multiple_extentions; then
	before_files=$(func_1 $extention $recursive $before_files)
else
	before_files=$(func_2 $recursive $extention)
fi
total_increment=0
c=0

echo "Time,IncremenalSize,TotalIncrement,FullSize,IncremenalFilesQty,AllFilesQty,.part Qty,AvailibleDisk" > $full_file_

trap control_c SIGINT

while :; do
	current=`du -shL -BM | sed 's/M..//g'`
	if [[ $? != 0 ]]; then
		sleep 1s
		# continue
	fi
	incremental=$(( $current - $SUM ))
	total_increment=$(bc <<< $total_increment+$incremental)
	SUM=$current
	# after_files=`ls -I "*.part" -I "*.ytdl" | wc -l`

	after_files=0
	if $multiple_extentions; then
		after_files=$(func_1 $extention $recursive $after_files)
	else
		after_files=$(func_2 $recursive $extention)
	fi

	date=$(date +%H:%M)
	IncremenalFilesQty=$(bc <<< $after_files-$before_files)
	if $recursive; then
		part_Qty=$(find . -name "*.part" 2>/dev/null| wc -l)
	else
		part_Qty=$(ls *.part 2>/dev/null| wc -l)
	fi
	current_partition=$(findmnt --output target --noheadings --target .) # df -P . | sed -n '$s/[^%]*%[[:blank:]]*//p'
	AvailibleDisk=$(df -hP "$current_partition" | sed 's/\ \{1,\}/,/g' | cut -d, -f4 | tail -n1)
	echo "Time,IncremenalSize,TotalIncrement,FullSize,IncremenalFilesQty,AllFilesQty,.part Qty,AvailibleDisk" > $file_
	echo "$date,$incremental,$total_increment,$SUM,$IncremenalFilesQty,$after_files,$part_Qty,$AvailibleDisk" >> $file_
	echo "$date,$incremental,$total_increment,$SUM,$IncremenalFilesQty,$after_files,$part_Qty,$AvailibleDisk" >> $full_file_

	let "c++"
	if [[ $c == 1 ]]; then
		cat $file_ | column -t -s, | grep --color "\|Time\|IncremenalSize\|TotalIncrement\|FullSize\|IncremenalFilesQty\|AllFilesQty\|.part Qty\|AvailibleDisk"
	else
		cat $file_ | column -t -s, | tail -1
	fi
	if [[ $c == 25 ]]; then
		c=0
	fi
	sleep $sleep_time
done