<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- This file was created with the aha Ansi HTML Adapter. https://github.com/theZiz/aha -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="application/xml+xhtml; charset=UTF-8" />
<title>stdin</title>
</head>
<body>
<pre>
diff --git a/bin/functional/diskfree b/bin/functional/diskfree
index 4650307..ff2eaa8 100755
--- a/bin/functional/diskfree
+++ b/bin/functional/diskfree
@@ -1,115 +1,154 @@
 #!/usr/bin/python3
 ##!/usr/bin/bash
 
 import sys
 import os
 from termcolor import colored
 
 _file__ = '/home/amir/.qmi'
 if os.path.exists(_file__):
 	os.remove(_file__)
 
 print(&quot;\n\n#############################################################&quot;)
 os.system(&quot;echo Filesystem,Size,Used,Avail,Use%,Mounted &gt; /home/amir/.dC&quot;)
 # print(colored(&quot;&quot;, &quot;red&quot;) + &quot;\n-----------------------------------------------------&quot;)
 os.system(&quot;df -h | grep /dev/sd | sed 's/ \{1,\}/,/g' | grep -v /efi &gt;&gt; /home/amir/.dC&quot;)
 os.system(&quot;&quot;&quot;cat  /home/amir/.dC | column -t -s, | grep --color &quot;\|Filesystem\|Size\|Used\|Avail\|Use%\|Mounted&quot; &quot;&quot;&quot;)
 print(&quot;#############################################################\n\n&quot;)
 
 def MB_to_GB(x, round_to_n=0):
 	if round_to_n == 0:
 		return round(x/1024)
 	else:
 		return round(x/1024, round_to_n)
 def m(x, add_pipe_in_last=True):
 	last_ = &quot;&quot;
 	if add_pipe_in_last:
 		last_ = &quot;|&quot;
 	return &quot; &quot; * (x - 2) + last_
 import os
+###############
+mounted_at = list(os.popen(&quot;df | grep ^/dev/sd | sed 's/\ \{1,\}/,/g' | grep -v  /boot/efi | rev | cut -d, -f1 | rev&quot;))
+mounted_at = [i.strip() for i in mounted_at]
+
+devs = list(os.popen(&quot;df | grep ^/dev/sd | sed 's/\ \{1,\}/,/g' | grep -v  /boot/efi | cut -d, -f1&quot;))
+devs = [i.strip() for i in devs]
+###############
+
+
 print(colored(&quot;&gt;&gt;&gt;&quot;, &quot;red&quot;) + &quot;: Used&quot;)
 print(colored(&quot;!!!&quot;, &quot;green&quot;) + &quot;: Unused&quot;)
-# a = list(os.popen(&quot;df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | sort -k5 -nr&quot;)) # sorted by &lt;used %&gt;
-a = list(os.popen(&quot;df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g'&quot;))
-# print(&quot; &quot; * (45), colored(&quot;Total  | Used  | Used  | Avail    | Mounted     &quot;, &quot;red&quot;, attrs=['reverse', 'bold']))
-open(_file__, 'w').write(
-	&quot;, , ,Total,Used,Used,Avail,Mounted&quot;)
-a = sorted(a, key=lambda x:x.split()[0])
-# sys.exit()
-for b in a:
-
-	total = int(b.split()[1].replace(&quot;M&quot;, &quot;&quot;))
-	if total &lt; 1000:
-	  continue
-	_M_ = b.split()[0][:-1]
-	used = int(b.split()[2].replace(&quot;M&quot;, &quot;&quot;))
-	avail = int(b.split()[3].replace(&quot;M&quot;, &quot;&quot;))
-	used_perc = int(b.split()[4].replace(&quot;M&quot;, &quot;&quot;).strip(&quot;%&quot;))
-	devided_by = 3
-	# used_size = int(used / total * 100) // devided_by
-	used_size = used_perc // devided_by
-	total_size = 100 // devided_by
-	LEN = len(b.split()[0])
-
-	# print(b.split()[0], 
-	# 	  m(12 - len(b.split()[0]), False),
-	# 	  colored(int(used_size) * &quot;&gt;&quot;, &quot;red&quot;) + 
-	# 	  colored(int(total_size - used_size) * &quot;!&quot;, &quot;green&quot;),
-	# 	  MB_to_GB(total),  m(11- len(str(total))), 
-	# 	  MB_to_GB(used), m(10- len(str(used))),
-	# 	  str(round(used_size/total_size*100)) + &quot; %&quot;, m(3),
-	# 	  MB_to_GB(avail, 1), m(11- len(str(avail))),
-	# 	  b.split()[-1])
-	open(_file__, 'a').write(
-		f&quot;&quot;&quot;\n{b.split()[0]},{int(used_size) * &quot;&gt;&quot;}{int(total_size - used_size) * &quot;!&quot;},{MB_to_GB(total)},{MB_to_GB(used)},{round(used_size/total_size*100)} %,{MB_to_GB(avail, 1)},{b.split()[-1]}\n&quot;&quot;&quot;
-		)
-os.system(f'cat {_file__} | column -t -s, | grep --color=auto &quot;\|Total\|Used\|Avail\|Mounted\|&gt;\|!&quot;')
-
-os.remove(&quot;/home/amir/.dC&quot;)
-#######################################################################
-# #!/bin/bash
-# echo -e &quot;
-# -----------------------------------------------------
-# Filesystem          Size  Used     Avail Use% Mounted
-# -----------------------------------------------------&quot;
-# df -BG | grep /dev/sd | grep -v &quot;1G    1G&quot; 
-#######################################################################
-
-
-#######################################################################
-# #!/usr/bin/env ipython3
-# import os
-# os.system(&quot;df -h &gt; temppp.txt&quot;)
-# with open(&quot;temppp.txt&quot;, &quot;r&quot;) as file:
-#   a = file.readlines()
-# import pandas as pd
-# #pd.set_option('display.max_columns', 10)
-# columns = [&quot;Filesystem&quot;,&quot;Size&quot;,&quot;Used&quot;,&quot;Avail&quot;,&quot;Use%&quot;, &quot;Mounted&quot;, &quot;on&quot;]
-# df = pd.DataFrame([i.split() for i in a], columns=columns).drop(0)
-# avail = []
-# for i in df.Avail:
-#     if i.endswith(&quot;G&quot;):
-#         avail.append(float(i.replace(&quot;G&quot;, &quot;&quot;)))
-#     elif i.endswith(&quot;M&quot;):
-#         avail.append(float(i.replace(&quot;M&quot;, &quot;&quot;))/1024)
-#     else:
-#         avail.append(int(i))
-# df.Avail = avail
-# import pprint
-# adf = df.query(&quot;Avail &gt; 0&quot;).sort_values(&quot;Avail&quot;, ascending = False)
-# adf.Avail = adf.Avail.astype(int).astype(str) + &quot; GB&quot;
-# pprint.pprint(adf[adf.Filesystem.str.contains(&quot;/dev&quot;)].drop(&quot;on&quot;, axis=1))
-# #pprint.pprint(df.query(&quot;Avail &gt; 0&quot;).sort_values(&quot;Avail&quot;, ascending = False))
-# os.remove(&quot;temppp.txt&quot;)
-
-
-
-
-# disk=`      df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f1`
-# total=`     df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f2 | sed s:M::g`
-# used=`      df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f3 | sed s:M::g`
-# avail=`     df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f4 | sed s:M::g`
-# use_perc=`  df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f5`
-# mounted_on=`df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f6`
-
-# echo $disk $total $used $avail $use_perc $mounted_on
\ No newline at end of file
+
+
+########################
+def bytes_to(bytes_):
+	size = round(bytes_ / 1024 / 1024 / 1024)
+	size_str = f&quot;{size}G&quot;
+	if size &lt; 1:
+		size = round(bytes_ / 1024 / 1024)
+		size_str = f&quot;{size}G&quot;
+	return size_str
+
+
+import shutil
+r = [' , ,Total,Used,Avail,Used%,Mounted']
+for m, d in zip(mounted_at, devs):
+	total, used, free = shutil.disk_usage(m) # in bytes
+	used_perc = round(used / total * 100)#str() + &quot;%&quot;
+	i = '&gt;'*(used_perc//3) + &quot;!&quot;*((100-used_perc)//3)
+	# print(total, used,free)
+	total = bytes_to(total)
+	used = bytes_to(used)
+	free = bytes_to(free)
+	f = f&quot;{d},{i},{total},{used},{free},{used_perc}%,{m}&quot;
+	r.append(f)
+	# break
+open(_file__, 'w').write('\n'.join(r)+&quot;\n&quot;)
+os.system(f'cat {_file__} | column -t -s, | grep --color=auto &quot;\|Total\|Used[%]*\|Avail\|Mounted\|&gt;\|!&quot;')
+print()
+
+########################
+# # a = list(os.popen(&quot;df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | sort -k5 -nr&quot;)) # sorted by &lt;used %&gt;
+# a = list(os.popen(&quot;df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g'&quot;))
+# # print(&quot; &quot; * (45), colored(&quot;Total  | Used  | Used  | Avail    | Mounted     &quot;, &quot;red&quot;, attrs=['reverse', 'bold']))
+# open(_file__, 'w').write(
+# 	&quot;, , ,Total,Used,Used,Avail,Mounted&quot;)
+# a = sorted(a, key=lambda x:x.split()[0])
+# # sys.exit()
+# for b in a:
+
+# 	total = int(b.split()[1].replace(&quot;M&quot;, &quot;&quot;))
+# 	if total &lt; 1000:
+# 	  continue
+# 	_M_ = b.split()[0][:-1]
+# 	used = int(b.split()[2].replace(&quot;M&quot;, &quot;&quot;))
+# 	avail = int(b.split()[3].replace(&quot;M&quot;, &quot;&quot;))
+# 	used_perc = int(b.split()[4].replace(&quot;M&quot;, &quot;&quot;).strip(&quot;%&quot;))
+# 	devided_by = 3
+# 	# used_size = int(used / total * 100) // devided_by
+# 	used_size = used_perc // devided_by
+# 	total_size = 100 // devided_by
+# 	LEN = len(b.split()[0])
+
+# 	# print(b.split()[0], 
+# 	# 	  m(12 - len(b.split()[0]), False),
+# 	# 	  colored(int(used_size) * &quot;&gt;&quot;, &quot;red&quot;) + 
+# 	# 	  colored(int(total_size - used_size) * &quot;!&quot;, &quot;green&quot;),
+# 	# 	  MB_to_GB(total),  m(11- len(str(total))), 
+# 	# 	  MB_to_GB(used), m(10- len(str(used))),
+# 	# 	  str(round(used_size/total_size*100)) + &quot; %&quot;, m(3),
+# 	# 	  MB_to_GB(avail, 1), m(11- len(str(avail))),
+# 	# 	  b.split()[-1])
+# 	open(_file__, 'a').write(
+# 		f&quot;&quot;&quot;\n{b.split()[0]},{int(used_size) * &quot;&gt;&quot;}{int(total_size - used_size) * &quot;!&quot;},{MB_to_GB(total)},{MB_to_GB(used)},{round(used_size/total_size*100)} %,{MB_to_GB(avail, 1)},{b.split()[-1]}\n&quot;&quot;&quot;
+# 		)
+# os.system(f'cat {_file__} | column -t -s, | grep --color=auto &quot;\|Total\|Used\|Avail\|Mounted\|&gt;\|!&quot;')
+
+# os.remove(&quot;/home/amir/.dC&quot;)
+# #######################################################################
+# # #!/bin/bash
+# # echo -e &quot;
+# # -----------------------------------------------------
+# # Filesystem          Size  Used     Avail Use% Mounted
+# # -----------------------------------------------------&quot;
+# # df -BG | grep /dev/sd | grep -v &quot;1G    1G&quot; 
+# #######################################################################
+
+
+# #######################################################################
+# # #!/usr/bin/env ipython3
+# # import os
+# # os.system(&quot;df -h &gt; temppp.txt&quot;)
+# # with open(&quot;temppp.txt&quot;, &quot;r&quot;) as file:
+# #   a = file.readlines()
+# # import pandas as pd
+# # #pd.set_option('display.max_columns', 10)
+# # columns = [&quot;Filesystem&quot;,&quot;Size&quot;,&quot;Used&quot;,&quot;Avail&quot;,&quot;Use%&quot;, &quot;Mounted&quot;, &quot;on&quot;]
+# # df = pd.DataFrame([i.split() for i in a], columns=columns).drop(0)
+# # avail = []
+# # for i in df.Avail:
+# #     if i.endswith(&quot;G&quot;):
+# #         avail.append(float(i.replace(&quot;G&quot;, &quot;&quot;)))
+# #     elif i.endswith(&quot;M&quot;):
+# #         avail.append(float(i.replace(&quot;M&quot;, &quot;&quot;))/1024)
+# #     else:
+# #         avail.append(int(i))
+# # df.Avail = avail
+# # import pprint
+# # adf = df.query(&quot;Avail &gt; 0&quot;).sort_values(&quot;Avail&quot;, ascending = False)
+# # adf.Avail = adf.Avail.astype(int).astype(str) + &quot; GB&quot;
+# # pprint.pprint(adf[adf.Filesystem.str.contains(&quot;/dev&quot;)].drop(&quot;on&quot;, axis=1))
+# # #pprint.pprint(df.query(&quot;Avail &gt; 0&quot;).sort_values(&quot;Avail&quot;, ascending = False))
+# # os.remove(&quot;temppp.txt&quot;)
+
+
+
+
+# # disk=`      df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f1`
+# # total=`     df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f2 | sed s:M::g`
+# # used=`      df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f3 | sed s:M::g`
+# # avail=`     df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f4 | sed s:M::g`
+# # use_perc=`  df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f5`
+# # mounted_on=`df -BM | grep /dev/sd | sed 's/\ \{2,\}/\ /g' | cut -d' ' -f6`
+
+# # echo $disk $total $used $avail $use_perc $mounted_on
\ No newline at end of file
</pre>
</body>
</html>
